SubDir HAIKU_TOP src kits interface ;

# If defined allows to run applications without the registrar
# -- for development only, of course.
if $(RUN_WITHOUT_REGISTRAR) {
	local defines = [ FDefines RUN_WITHOUT_REGISTRAR ] ;
	SubDirCcFlags $(defines) ;
	SubDirC++Flags $(defines) ;
}

# If defined allows to run applications without the app server
# -- needed until the app server runs on our kernel.
RUN_WITHOUT_APP_SERVER ?= 0 ;
if $(RUN_WITHOUT_APP_SERVER) != 0 {
	local defines = [ FDefines RUN_WITHOUT_APP_SERVER ] ;
	SubDirCcFlags $(defines) ;
	SubDirC++Flags $(defines) ;
}

if ! $(TARGET_PLATFORM_HAIKU_COMPATIBLE) {
	SubDirCcFlags $(defines) ;
	SubDirC++Flags $(defines) ;
}

SetSubDirSupportedPlatforms haiku libbe_test ;

UseLibraryHeaders agg ;
UsePrivateHeaders app input print interface locale shared support tracker ;

UseHeaders [ FDirName $(HAIKU_TOP) src kits tracker ] ;


local architectureObject ;
for architectureObject in [ MultiArchSubDirSetup ] {
	on $(architectureObject) {
		local architecture = $(TARGET_PACKAGING_ARCH) ;

		SEARCH_SOURCE += [ FDirName $(SUBDIR) textview_support ] ;
		SEARCH_SOURCE += [ FDirName $(SUBDIR) layouter ] ;

		MergeObject <libbe!$(architecture)>interface_kit.o :
			AboutWindow.cpp
			AbstractLayout.cpp
			AbstractLayoutItem.cpp
			AbstractSpinner.cpp
			AffineTransform.cpp
			Alert.cpp
			Alignment.cpp
			Bitmap.cpp
			BMCPrivate.cpp
			Box.cpp
			Button.cpp
			CardLayout.cpp
			ChannelControl.cpp
			ChannelSlider.cpp
			CheckBox.cpp
			ColorConversion.cpp
			ColorControl.cpp
			ColorTools.cpp
			Control.cpp
			ControlLook.cpp
			DecorInfo.cpp
			Deskbar.cpp
			DecimalSpinner.cpp
			Dragger.cpp
			Font.cpp
			Gradient.cpp
			GradientLinear.cpp
			GradientRadial.cpp
			GradientRadialFocus.cpp
			GradientDiamond.cpp
			GradientConic.cpp
			GraphicsDefs.cpp
			GridLayout.cpp
			GridLayoutBuilder.cpp
			GridView.cpp
			GroupLayout.cpp
			GroupLayoutBuilder.cpp
			GroupView.cpp
			Icon.cpp
			Input.cpp
			InterfaceDefs.cpp
			Layout.cpp
			LayoutContext.cpp
			LayoutItem.cpp
			LayoutUtils.cpp
			ListItem.cpp
			ListView.cpp
			Menu.cpp
			MenuBar.cpp
			MenuField.cpp
			MenuItem.cpp
			MenuPrivate.cpp
			MenuWindow.cpp
			OptionControl.cpp
			OptionPopUp.cpp
			OutlineListView.cpp
			Picture.cpp
			PictureButton.cpp
			PictureDataWriter.cpp
			PicturePlayer.cpp
			Point.cpp
			Polygon.cpp
			PopUpMenu.cpp
			PrintJob.cpp
			PrivateScreen.cpp
			RadioButton.cpp
			Rect.cpp
			Region.cpp
			RegionSupport.cpp
			Screen.cpp
			ScrollBar.cpp
			ScrollView.cpp
			SeparatorItem.cpp
			SeparatorView.cpp
			Shape.cpp
			Shelf.cpp
			Size.cpp
			Slider.cpp
			SpaceLayoutItem.cpp
			Spinner.cpp
			SplitLayout.cpp
			SplitLayoutBuilder.cpp
			SplitView.cpp
			StatusBar.cpp
			StringItem.cpp
			StringView.cpp
			TabView.cpp
			TextControl.cpp
			TextInput.cpp
			TextView.cpp
			ToolTip.cpp
			ToolTipManager.cpp
			TwoDimensionalLayout.cpp
			View.cpp
			ViewLayoutItem.cpp
			ViewPort.cpp
			Window.cpp
			WindowStack.cpp
			ZombieReplicantView.cpp

			# BTextView support
			InlineInput.cpp
			LineBuffer.cpp
			StyleBuffer.cpp
			TextGapBuffer.cpp
			UndoBuffer.cpp
			WidthBuffer.cpp

			# layouter
			CollapsingLayouter.cpp
			ComplexLayouter.cpp
			Layouter.cpp
			LayoutOptimizer.cpp
			OneElementLayouter.cpp
			SimpleLayouter.cpp

			: [ MultiArchDefaultGristFiles libshared.a ]
			;

		StaticLibrary [ MultiArchDefaultGristFiles libcolumnlistview.a ] :
			ColumnListView.cpp
			ColumnTypes.cpp
		;
	}
}

