AC_PREREQ(2.54)

# Making releases:
#   etk_micro_version += 1;
#   etk_interface_age += 1;
#   etk_binary_age += 1;
# if any functions have been added, set etk_interface_age to 0.
# if backwards compatibility has been broken,
# set etk_binary_age _and_ etk_interface_age to 0.
#
m4_define([etk_major_version], [0])
m4_define([etk_minor_version], [3])
m4_define([etk_micro_version], [4])
m4_define([etk_interface_age], [1])
m4_define([etk_binary_age],
          [m4_eval(100 * etk_minor_version + etk_micro_version)])
m4_define([etk_version],
          [etk_major_version.etk_minor_version.etk_micro_version])

# libtool version related macros
m4_define([etk_lt_release], [etk_major_version.etk_minor_version])
m4_define([etk_lt_current],
          [m4_eval(100 * etk_minor_version + etk_micro_version - etk_interface_age)])
m4_define([etk_lt_revision], [etk_interface_age])
m4_define([etk_lt_age], [m4_eval(etk_binary_age - etk_interface_age)])
m4_define([etk_lt_current_minus_age],
          [m4_eval(etk_lt_current - etk_lt_age)])

# if the minor version number is odd, then we want debugging.  Otherwise
# we only want minimal debugging support.
m4_define([etk_debug_default],
          [m4_if(m4_eval(etk_minor_version % 2), [1], [medium], [minimum])])

# initalize autoconf
AC_INIT(etkxx, [etk_version], [])
AC_CONFIG_SRCDIR([etkxx.h])

# check host
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

# Save this value here, since automake will set cflags later
AM_INIT_AUTOMAKE([no-define])

# Specify a configuration file
AM_CONFIG_HEADER([etk/config.h.general])

ETK_MAJOR_VERSION=etk_major_version
ETK_MINOR_VERSION=etk_minor_version
ETK_MICRO_VERSION=etk_micro_version
ETK_INTERFACE_AGE=etk_interface_age
ETK_BINARY_AGE=etk_binary_age
ETK_VERSION=etk_version

AC_SUBST(ETK_MAJOR_VERSION)
AC_SUBST(ETK_MINOR_VERSION)
AC_SUBST(ETK_MICRO_VERSION)
AC_SUBST(ETK_VERSION)
AC_SUBST(ETK_INTERFACE_AGE)
AC_SUBST(ETK_BINARY_AGE)

AC_DEFINE_UNQUOTED(ETK_MAJOR_VERSION, $ETK_MAJOR_VERSION, [Define to the ETK++ major version])
AC_DEFINE_UNQUOTED(ETK_MINOR_VERSION, $ETK_MINOR_VERSION, [Define to the ETK++ minor version])
AC_DEFINE_UNQUOTED(ETK_MICRO_VERSION, $ETK_MICRO_VERSION, [Define to the ETK++ micro version])
AC_DEFINE_UNQUOTED(ETK_INTERFACE_AGE, $ETK_INTERFACE_AGE, [Define to the ETK++ interface age])
AC_DEFINE_UNQUOTED(ETK_BINARY_AGE, $ETK_BINARY_AGE, [Define to the ETK++ binary age])

# initalize version generated by libtool
LT_RELEASE=etk_lt_release
LT_CURRENT=etk_lt_current
LT_REVISION=etk_lt_revision
LT_AGE=etk_lt_age
LT_CURRENT_MINUS_AGE=etk_lt_current_minus_age
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)
AC_SUBST(LT_CURRENT_MINUS_AGE)

ETK_CFLAGS=
ETK_LIBS=

# check system
etk_native_os=unknown
etk_native_os_extra=none
AC_MSG_CHECKING(for OS)
case $host in
  *-*-linux*)
    etk_native_os=unix
    etk_native_os_extra=linux
    ;;
  *-*-solaris*)
    etk_native_os=unix
    etk_native_os_extra=solaris
    ;;
  *-*-freebsd6*)
    etk_native_os=unix
    etk_native_os_extra=freebsd6
    ;;
  *-*-freebsd*)
    etk_native_os=unix
    etk_native_os_extra=freebsd
    ;;
  *-*-darwin*)
    etk_native_os=unix
    etk_native_os_extra=darwin
    ;;
  *-*-beos*|*-*-haiku*)
    etk_native_os=beos
    ;;
  *-*-mingw*)
    etk_native_os=win32
    etk_native_os_extra=mingw
    ;;
  *-*-cygwin*)
    etk_native_os=win32
    etk_native_os_extra=cygwin
    ;;
esac
AC_MSG_RESULT($etk_native_os)

if test "$etk_native_os" = "unknown"; then
  AC_MSG_WARN("
                Unable to determine what system we suppose to implement,
                The system maybe unsupported for ETK++.")
fi

AM_CONDITIONAL(ETK_OS_UNIX, [test "$etk_native_os" = "unix" || test "$etk_native_os_extra" = "cygwin"])
AM_CONDITIONAL(ETK_OS_BEOS, [test "$etk_native_os" = "beos"])
AM_CONDITIONAL(ETK_OS_WIN32, [test "$etk_native_os" = "win32" && test "$etk_native_os_extra" != "cygwin"])
AM_CONDITIONAL(ETK_NATIVE_WIN32, [test "$etk_native_os" = "win32"])

AM_CONDITIONAL(ETK_OS_LINUX, [test "$etk_native_os_extra" = "linux"])
AM_CONDITIONAL(ETK_OS_SOLARIS, [test "$etk_native_os_extra" = "solaris"])
AM_CONDITIONAL(ETK_OS_FREEBSD, [test "$etk_native_os_extra" = "freebsd" || test "$etk_native_os_extra" = "freebsd6"])
AM_CONDITIONAL(ETK_OS_DARWIN, [test "$etk_native_os_extra" = "darwin"])
AM_CONDITIONAL(ETK_OS_CYGWIN, [test "$etk_native_os_extra" = "cygwin"])

if test "$etk_native_os" = "win32"; then
  AC_CHECK_PROG(ms_librarian, [lib.exe], [yes], [no])
fi
AM_CONDITIONAL(MS_LIB_AVAILABLE, [test x$ms_librarian = xyes])


AC_ARG_ENABLE(debug,
              AC_HELP_STRING([--enable-debug=@<:@no/minimum/medium/yes@:>@],
                             [turn on debugging @<:@default=etk_debug_default@:>@]),,
              enable_debug=etk_debug_default)

AC_ARG_ENABLE(mem_tracing,
              AC_HELP_STRING([--enable-mem-tracing=@<:@no/yes@:>@],
                             [turn on memory tracing @<:@default=no@:>@]),,
              enable_mem_tracing=no)

AC_ARG_ENABLE(freetype,
              AC_HELP_STRING([--enable-freetype=@<:@yes/no@:>@],
                             [turn on freetype2 font support @<:@default=no@:>@]),,
              enable_freetype=no)

AC_ARG_ENABLE(xft-x11,
              AC_HELP_STRING([--enable-xft-x11=@<:@yes/no@:>@],
                             [turn on XFT font support for X11@<:@default=no@:>@]),,
              enable_xft_x11=no)

AC_ARG_ENABLE(xrender-check,
              AC_HELP_STRING([--disable-xrender-check=@<:@yes/no@:>@],
                             [turn off XRender check@<:@default=no@:>@]),,
              enable_xrender_check=yes)

if test "$etk_native_os" = "win32"; then
  if test x$enable_static = xyes || test x$enable_static = x; then
    AC_MSG_WARN([Disabling static library build, must build as DLL on Windows.])
  fi
  if test x$enable_shared = xno; then
    AC_MSG_WARN([Enabling shared library build, must build as DLL on Windows.])
  fi
  enable_static=no
  enable_shared=yes
fi

# Check for a working C/C++ compiler, but do not bail out, if none is found.
AC_PROG_CC
AC_PROG_CXX
#AC_CHECK_PROGS(CXX, [$CCC g++ c++ gcc CC cxx cc++ cl], [gcc])

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_TRY_COMPILE(,[class a { int b; } c;], ,CXX=)
AM_CONDITIONAL(HAVE_CXX, test "$CXX" != "")
AC_LANG_RESTORE

AM_PROG_CC_STDC
AC_PROG_INSTALL

AC_CHECK_TOOL(DLLTOOL, dlltool)
AC_CHECK_TOOL(WINDRES, windres)

#
# Find pkg-config
#
ac_cv_pkg_config_valid=no
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test x$PKG_CONFIG != xno ; then
  if $PKG_CONFIG --atleast-pkgconfig-version 0.14 ; then
    ac_cv_pkg_config_valid=yes
  fi
fi

if test "$ac_cv_pkg_config_valid" != "yes"; then
	AC_MSG_WARN("
                pkg-config not found or which version less than 0.14,
		some checking will ignore now. If something failed,
		please update your pkg-config.")
fi
AM_CONDITIONAL(ETK_INSTALL_PKG_CONFIG_FILES, [test "$ac_cv_pkg_config_valid" = "yes"])


# Initialize libtool
AC_LIBTOOL_DLOPEN
AC_LIBTOOL_WIN32_DLL
AM_DISABLE_STATIC
AM_PROG_LIBTOOL

if test "$GCC" = "yes"; then

  if test -z "$ac_cv_prog_CC"; then
    our_gcc="$CC"
  else
    our_gcc="$ac_cv_prog_CC"
  fi

  case " $CFLAGS " in
  *[[\ \	]]-Wall[[\ \	]]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac

  ETK_CFLAGS="$ETK_CFLAGS -Wno-multichar"
  case " $CFLAGS " in
  *[[\ \	]]-Wno-multichar[[\ \	]]*) ;;
  *) CFLAGS="$CFLAGS -Wno-multichar" ;;
  esac

  case `$our_gcc -dumpversion | sed -e 's,\..*,.,' -e q` in
  4.*)
    ETK_CFLAGS="$ETK_CFLAGS -fno-strict-aliasing"
    case " $CFLAGS " in
    *[[\ \	]]-fno-strict-aliasing[[\ \	]]*) ;;
    *) CFLAGS="$CFLAGS -fno-strict-aliasing" ;;
    esac
  ;;
  esac

  # Ensure MSVC-compatible struct packing convention is used when
  # compiling for Win32 with gcc.
  # What flag to depends on gcc version: gcc3 uses "-mms-bitfields", while
  # gcc2 uses "-fnative-struct".
  if test "$etk_native_os" = "win32"; then
    msnative_struct=''
    AC_MSG_CHECKING([how to get MSVC-compatible struct packing])
    case `$our_gcc --version | sed -e 's,\..*,.,' -e q` in
      2.)
        if $our_gcc -v --help 2 >/dev/null | grep fnative-struct >/dev/null; then
          msnative_struct='-fnative-struct'
        fi
        ;;
      *)
        if $our_gcc -v --help 2 >/dev/null | grep ms-bitfields >/dev/null; then
          msnative_struct='-mms-bitfields'
        fi
        ;;
    esac
    if test x"$msnative_struct" = x ; then
      AC_MSG_RESULT([no way])
      AC_MSG_WARN([produced libraries might be incompatible with MSVC-compiled code])
    else
      CFLAGS="$CFLAGS $msnative_struct"
      AC_MSG_RESULT([${msnative_struct}])
    fi
    ETK_CFLAGS="$ETK_CFLAGS $msnative_struct"
  fi

fi

AC_EXEEXT

AC_MSG_CHECKING(for debug flags)
if test "x$enable_debug" = "xyes" || test "x$enable_debug" = "xmedium"; then
  if test "$GCC" = "yes"; then
	if test "x$enable_debug" = "xyes"; then
		case " $CFLAGS " in
			*[[\ \	]]-g[[\ \	]]*) ;;
			*) CFLAGS="$CFLAGS -g" ;;
		esac
	else
		CFLAGS="`echo \' $CFLAGS -O3 \' | sed -e \"s/ -g / /\" -e \"s/ -O[[1,2,4,5,6,7,8,9]] / /\" -e \"s/^' //\" -e \"s/ '$//\"`"
	fi
  fi

  ETK_DEBUG_FLAGS="-DETK_ENABLE_DEBUG"
else
  ETK_DEBUG_FLAGS="-DETK_DISABLE_MORE_CHECKS"

  if test "$GCC" = "yes"; then
	CFLAGS="`echo \' $CFLAGS -O3 \' | sed -e \"s/ -g / /\" -e \"s/ -O[[1,2,4,5,6,7,8,9]] / /\" -e \"s/^' //\" -e \"s/ '$//\"`"
  fi

  if test "x$enable_debug" = "xno"; then
    ETK_DEBUG_FLAGS="-DETK_DISABLE_ASSERT -DETK_DISABLE_CHECKS"
  fi
fi
AM_CONDITIONAL(ETK_COMPILE_TEST, [test "$enable_debug" = "yes"])
AC_MSG_RESULT([$ETK_DEBUG_FLAGS])

# Test program for Win32API
m4_define([etk_win32api_test],[
#include <windows.h>
int main()
{
	DWORD dwVersion = GetVersion();
	exit(0);
}])

if test "x$etk_native_os" = xwin32; then
AC_MSG_CHECKING([for Win32 Library])
case $etk_native_os_extra in
  mingw)
    ETK_WIN32_RESOURCE=etkxx-win32res.lo
    ETK_DEF=etkxx.def
    etk_win32_libs="-lmsvcrt -lkernel32 -luser32"
    etk_win32_libs_extra="-luserenv -ladvapi32"
    ;;
  cygwin)
    ETK_WIN32_RESOURCE=etkxx-win32res.lo
    ETK_DEF=etkxx.def
    etk_win32_libs="-lkernel32 -luser32"
    etk_win32_libs_extra=
    ;;
  *)
    ETK_WIN32_RESOURCE=
    ETK_DEF=
    etk_win32_libs=
    etk_win32_libs_extra=
    ;;
esac
AC_MSG_RESULT([$etk_win32_libs])
AC_SUBST(ETK_WIN32_RESOURCE)
AC_SUBST(ETK_DEF)
ETK_LIBS="$ETK_LIBS $etk_win32_libs"
ETK_EXTRA_LIBS="$ETK_EXTRA_LIBS $etk_win32_libs_extra"

etk_save_LIBS="$LIBS"
LIBS="$etk_save_LIBS -lkernel32"
AC_MSG_CHECKING(for Win32API)
AC_TRY_RUN(etk_win32api_test(0),
	   have_win32api=yes,
	   have_win32api=no,
	   [AC_LINK_IFELSE(etk_win32api_test(0),
	   have_win32api=yes,
	   have_win32api=no)])
AC_MSG_RESULT($have_win32api)
LIBS="$etk_save_LIBS"
if test "x$have_win32api" = xno; then
  AC_MSG_ERROR([
*** Unable to find Win32API runtime.
])
fi

fi

AC_MSG_CHECKING(whether make is GNU Make)
STRIP_BEGIN=
STRIP_END=
if $ac_make --version 2>/dev/null | grep '^GNU Make ' >/dev/null ; then
	STRIP_BEGIN='$(strip $(STRIP_DUMMY)'
	STRIP_END=')'
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
fi
STRIP_DUMMY=
AC_SUBST(STRIP_DUMMY)
AC_SUBST(STRIP_BEGIN)
AC_SUBST(STRIP_END)

AC_SUBST(ETK_DEBUG_FLAGS)

# Checks for header files
AC_HEADER_STDC

# Checks for library functions
AC_FUNC_VPRINTF
AC_FUNC_ALLOCA

AC_CHECK_HEADERS([float.h unistd.h limits.h values.h sys/types.h sys/stat.h dlfcn.h dirent.h mntent.h])

AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T

AC_CHECK_FUNCS(strtof)
AC_CHECK_FUNCS(strcasecmp strncasecmp strcasechr strrcasechr strstr strrstr strcasestr strrcasestr)
AC_CHECK_FUNCS(gettimeofday sigaction mremap)
AC_CHECK_FUNCS(on_exit atexit)
AC_CHECK_FUNCS(stat64)
AC_CHECK_FUNCS(localtime_r)
AC_CHECK_FUNCS(gethostbyname_r gethostbyaddr_r getservbyname_r)

AC_LANG_SAVE
AC_LANG_CPLUSPLUS

AC_CACHE_CHECK([for fpclassify with C++],etk_cv_fpclassify,[
	AC_LINK_IFELSE([
	#include <math.h>
	int main() {
	  int val = (fpclassify((double)0) == FP_ZERO ? 1 : 0);
	  return 0;}
	],
	[etk_cv_fpclassify=yes],
	[etk_cv_fpclassify=no],
	)
])

if test x$etk_cv_fpclassify = xyes; then
  AC_DEFINE(HAVE_FPCLASSIFY,1,[define to support fpclassify function])
fi

AC_CACHE_CHECK([for isfinite with C++],etk_cv_isfinite,[
	AC_LINK_IFELSE([
	#include <math.h>
	int main() {
	  int val = isfinite((double)0);
	  return 0;}
	],
	[etk_cv_isfinite=yes],
	[etk_cv_isfinite=no],
	)
])

if test x$etk_cv_isfinite = xyes; then
  AC_DEFINE(HAVE_ISFINITE,1,[define to support isfinite function])
fi

AC_CACHE_CHECK([for isnan with C++],etk_cv_isnan,[
	AC_LINK_IFELSE([
	#include <math.h>
	int main() {
	  int val = isnan((double)0);
	  return 0;}
	],
	[etk_cv_isnan=yes],
	[etk_cv_isnan=no],
	)
])
if test x$etk_cv_isnan = xyes; then
  AC_DEFINE(HAVE_ISNAN,1,[define to support isnan function])
fi

AC_CACHE_CHECK([for round with C++],etk_cv_round,[
	AC_LINK_IFELSE([
	#include <math.h>
	int main() {
	  double val = round(0);
	  return 0;}
	],
	[etk_cv_round=yes],
	[etk_cv_round=no],
	)
])

if test x$etk_cv_round = xyes; then
  AC_DEFINE(HAVE_ROUND,1,[define to support round function])
fi

AC_LANG_RESTORE


CXXFLAGS="$CFLAGS"

AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)

AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(void *)
AC_CHECK_SIZEOF(__int64)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(double)

# usually, it's impossible
if test x$ac_cv_sizeof_char != x1 ; then
  AC_MSG_ERROR([
*** The value what returned from "sizeof(char)" isn't equal to 1.
*** You might report the info of system to the source maintainer for fixing it.
])
fi

etk_cv_address_format=none
AC_MSG_CHECKING(for type to convert from "reinterpret_cast<void*>")
case $ac_cv_sizeof_void_p in
  2)
    etk_cv_address_type=euint16
  ;;
  4)
    etk_cv_address_type=euint32
  ;;
  8)
    etk_cv_address_type=euint64
  ;;
esac
AC_MSG_RESULT(${etk_cv_address_type})

if test x$etk_cv_address_type = xnone ; then
  AC_MSG_ERROR([
*** Unable to detect the type to convert from "reinterpret_cast<void*>".
*** You might want to consider using the GNU C compiler.
])
fi

if test x$ac_cv_sizeof_long = x8 || test x$ac_cv_sizeof_long_long = x8 || test x$ac_cv_sizeof___int64 = x8 ; then
  :
else
  AC_MSG_ERROR([
*** ETK++ requires a 64 bit type. You might want to consider
*** using the GNU C compiler.
])
fi

AC_C_BIGENDIAN([ETK_ENDIAN="ETK_BIG_ENDIAN"], [ETK_ENDIAN="ETK_LITTLE_ENDIAN"], [ETK_ENDIAN="ETK_UNKNOWN_ENDIAN"])

AC_LANG_SAVE
AC_LANG_CPLUSPLUS

AC_CACHE_CHECK([for va_copy with C++],etk_cv_va_copy,[
	AC_LINK_IFELSE([
	#include <stdlib.h>
	#include <stdarg.h>
	void f(int i, ...) {
	va_list args1, args2;
	va_start(args1, i);
	va_copy(args2, args1);
	if (va_arg(args2, int) != 42 || va_arg(args1, int) != 42)
	  exit (1);
	va_end(args1); va_end(args2);
	}
	int main() {
	  f(0, 42);
	  return 0;}
	],
	[etk_cv_va_copy=yes],
	[etk_cv_va_copy=no],
	)
])
if test x$etk_cv_va_copy = xyes; then
  AC_DEFINE(HAVE_VA_COPY,1,[define to support va_copy function])
else
  AC_CACHE_CHECK([for __va_copy with C++],etk_cv___va_copy,[
	AC_LINK_IFELSE([
	#include <stdlib.h>
	#include <stdarg.h>
	void f(int i, ...) {
	va_list args1, args2;
	va_start(args1, i);
	__va_copy(args2, args1);
	if (va_arg(args2, int) != 42 || va_arg(args1, int) != 42)
	  exit (1);
	va_end(args1); va_end(args2);
	}
	int main() {
	  f(0, 42);
	  return 0;}
	],
	[etk_cv___va_copy=yes],
	[etk_cv___va_copy=no],
	)
  ])
  if test x$etk_cv___va_copy = xyes; then
    AC_DEFINE(HAVE___VA_COPY,1,[define to support __va_copy function])
  fi
fi

AC_LANG_RESTORE

if test "$ac_cv_header_sys_types_h" = "yes"; then

AC_MSG_CHECKING(for bzero)
AC_CACHE_VAL(etk_cv_bzero,[
	AC_LINK_IFELSE([
	#include <string.h>
	int main() {
	  char str[2];
	  bzero(str, sizeof(str));
	  return 0;}
	],
	[etk_cv_bzero=yes],
	[etk_cv_bzero=no],
	)
])
AC_MSG_RESULT(${etk_cv_bzero})

fi

AC_CACHE_CHECK([for long long], ac_cv_type_long_long,
  [AC_TRY_LINK([long long ll = 1LL; int i = 63;],
    [long long llmax = (long long) -1;
     return ll << i | ll >> i | llmax / ll | llmax % ll;],
    ac_cv_type_long_long=yes,
    ac_cv_type_long_long=no)])
  if test $ac_cv_type_long_long = yes; then
    AC_DEFINE(HAVE_LONG_LONG, 1,
      [Define if you have the 'long long' type.])
fi

AC_ARG_WITH(etkxx_cflags,
           [AC_HELP_STRING([--with-etkxx-cflags=],
                           [specify C compiler flags for ETK++])],
           [if test "x$with_etkxx_cflags" = x; then
		want_etkxx_cflags=
	    else
		want_etkxx_cflags=$with_etkxx_cflags
	    fi],
	   [want_etkxx_cflags=])

AC_ARG_WITH(etkxx_libs,
           [AC_HELP_STRING([--with-etkxx-libs=],
                           [specify linker flags for ETK++])],
           [if test "x$with_etkxx_libs" = x; then
		want_etkxx_libs=
	    else
		want_etkxx_libs=$with_etkxx_libs
	    fi],
	   [want_etkxx_libs=])

AC_MSG_CHECKING(for C compiler flags for ETK++)
if test "x$want_etkxx_cflags" = x; then
	AC_MSG_RESULT(none available)
else
	ETK_CFLAGS="$ETK_CFLAGS $want_etkxx_cflags"
	AC_MSG_RESULT($want_etkxx_cflags)
fi

AC_MSG_CHECKING(for linker flags for ETK++)
if test "x$want_etkxx_libs" = x; then
	AC_MSG_RESULT([none available.])
else
	ETK_LIBS="$ETK_LIBS $want_etkxx_libs"
	AC_MSG_RESULT($want_etkxx_libs)
fi

AC_MSG_CHECKING(for C compiler extra flags for ETK++)
case $etk_native_os_extra in
	*)
		etk_system_cflags=
		etk_extra_cflags=
	;;
esac
if test "x$etk_system_cflags" != x; then
	ETK_CFLAGS="$ETK_CFLAGS $etk_system_cflags"
fi
AC_MSG_RESULT(done)

AC_MSG_CHECKING(for linker extra flags for ETK++)
case $etk_native_os_extra in
	linux|solaris)
		etk_system_libs="-lrt"
		etk_extra_libs="-ldl"
	;;
	cygwin)
		etk_system_libs=
		etk_extra_libs="-ldl -lcygwin"
	;;
	darwin)
		etk_extra_libs="-ldl"
	;;
	*)
		etk_system_libs=
		etk_extra_libs=
	;;
esac
if test "x$etk_system_libs" != x ; then
	ETK_LIBS="$ETK_LIBS $etk_system_libs"
fi
AC_MSG_RESULT(done)

# Test program for socket
m4_define([etk_net_test],[
#include <sys/types.h>
#include <sys/socket.h> 
int main()
{
	socket(AF_INET, SOCK_DGRAM, 0);
	exit(0);
}])


case $etk_native_os_extra in
	mingw)
		etk_net_libs="-lws2_32"
	;;
	*)
		etk_net_libs=none
	;;
esac
if test "$etk_net_libs" = none; then
	etk_save_LIBS="$LIBS"
        for net_lib in none net socket; do
		if test x"$net_lib" = xnone; then
			add_net_lib=""
			IN=""
		else
			add_net_lib="-l$net_lib"
			IN=" in -l$net_lib"
		fi

		LIBS="$etk_save_LIBS $add_net_lib"

		AC_MSG_CHECKING(for socket$IN)
		AC_TRY_RUN(etk_net_test(0),
			   etk_result=yes,
			   etk_result=no,
			   [AC_LINK_IFELSE(etk_net_test(0),
					   etk_result=yes,
					   etk_result=no)])
		AC_MSG_RESULT($etk_result)

		if test "$etk_result" = "yes" ; then
			if test x"$net_lib" != xnone; then
				etk_net_libs="$add_net_lib"
			fi
			break
		fi
	done
	LIBS="$etk_save_LIBS"
fi
case $etk_native_os in
	beos)
		if test "$etk_net_libs" = "socket" ; then
			# Exp/Dano
			etk_net_libs="-lsocket -lbind"
		fi
	;;
esac
if test "$etk_net_libs" != "none" ; then
	ETK_EXTRA_LIBS="$ETK_EXTRA_LIBS $etk_net_libs"
fi


ETK_EXTRA_CFLAGS="$ETK_EXTRA_CFLAGS $want_etkxx_cflags $etk_system_cflags $etk_extra_cflags"
ETK_EXTRA_LIBS="$ETK_EXTRA_LIBS $want_etkxx_libs $etk_system_libs $etk_extra_libs"

# ****************************
# ***  built-in graphics   ***
# ****************************

AC_ARG_WITH(graphics,
           [AC_HELP_STRING([--with-graphics=@<:@yes/no@:>@],
                           [specify whether to detect graphics @<:@default=yes@:>@])],
           [if test "x$with_graphics" = x; then
		want_graphics=yes
	    else
		want_graphics=$with_graphics
	    fi],
	   [want_graphics=yes])

AC_ARG_WITH(built-in-graphics,
           [AC_HELP_STRING([--with-built-in-graphics=@<:@x11/beos/win32/directfb/linuxfb/carbon/auto/none@:>@],
                           [specify a graphics implementation to built-in @<:@default=none@:>@])],
           [if test x$with_built_in_graphics = x; then
		want_built_in_graphics=auto
	    else
		want_built_in_graphics=$with_built_in_graphics
	    fi],
	   [want_built_in_graphics=none])

# determination of graphics implementation
# ****************************************

etk_built_in_graphics=none
ETK_GRAPHICS_BUILT_IN="ETK_GRAPHICS_NONE_BUILT_IN"

etk_graphics_x11=no
etk_graphics_beos=no
etk_graphics_win32=no
etk_graphics_directfb=no
etk_graphics_linuxfb=no
etk_graphics_carbon=no

if test "x$want_graphics" = "xyes"; then

if test "x$etk_native_os" = xbeos; then
	etk_graphics_beos=yes
	etk_graphics_beos_cflags=
	etk_graphics_beos_libs="-lbe -lroot"
	if test "x$want_built_in_graphics" = xauto || test "x$want_built_in_graphics" = xbeos; then
		etk_built_in_graphics=beos
		ETK_GRAPHICS_BUILT_IN="ETK_GRAPHICS_BEOS_BUILT_IN"
		ETK_EXTRA_LIBS="$ETK_EXTRA_LIBS $etk_graphics_beos_libs"
	fi
fi


# Test program for Carbon
m4_define([etk_carbon_test],[
#include <Carbon/Carbon.h>
int main()
{
	/* TODO */
	exit(0);
}])

AC_MSG_CHECKING(for Carbon)
AC_TRY_RUN(etk_carbon_test(0),
	   have_carbon=yes,
	   have_carbon=no,
	   [AC_LINK_IFELSE(etk_carbon_test(0),
	   have_carbon=yes,
	   have_carbon=no)])
if test "x$have_carbon" = xyes; then
	etk_graphics_carbon=yes
	etk_graphics_carbon_cflags=
	etk_graphics_carbon_libs=
	if test "x$etk_native_os_extra" = xdarwin && test "x$want_built_in_graphics" = xauto; then
		etk_built_in_graphics=carbon
	fi
	if test "x$want_built_in_graphics" = xcarbon; then
		etk_built_in_graphics=carbon
	fi
	if test "x$etk_built_in_graphics" = xcarbon; then
		ETK_GRAPHICS_BUILT_IN="ETK_GRAPHICS_CARBON_BUILT_IN"
		ETK_EXTRA_LIBS="$ETK_EXTRA_LIBS $etk_graphics_carbon_libs"
	fi
fi
AC_MSG_RESULT($have_carbon)


case $etk_native_os_extra in
	mingw|cygwin)
		etk_graphics_win32=yes
		etk_graphics_win32_cflags=
		etk_graphics_win32_libs="-lgdi32 -limm32 -lkernel32 -luser32"
		if test "x$want_built_in_graphics" = xauto || test "x$want_built_in_graphics" = xwin32; then
			etk_built_in_graphics=win32
			ETK_GRAPHICS_BUILT_IN="ETK_GRAPHICS_WIN32_BUILT_IN"
			ETK_EXTRA_LIBS="$ETK_EXTRA_LIBS $etk_graphics_win32_libs"
		fi
	;;
	linux)
		etk_graphics_linuxfb=yes
		etk_graphics_linuxfb_cflags=
		etk_graphics_linuxfb_libs=
		if test "x$want_built_in_graphics" = xauto || test "x$want_built_in_graphics" = xlinuxfb; then
			etk_built_in_graphics=linuxfb
			ETK_GRAPHICS_BUILT_IN="ETK_GRAPHICS_LINUXFB_BUILT_IN"
			ETK_EXTRA_LIBS="$ETK_EXTRA_LIBS $etk_graphics_linuxfb_libs"
		fi
		if test "$ac_cv_pkg_config_valid" = "yes"; then
			PKG_CHECK_MODULES(DIRECTFB, directfb >= 0.9.20,
			[
				etk_graphics_directfb=yes
				etk_graphics_directfb_cflags="$DIRECTFB_CFLAGS"
				etk_graphics_directfb_libs="$DIRECTFB_LIBS"
				if test "x$want_built_in_graphics" = xdirectfb; then
					etk_built_in_graphics=directfb
					ETK_GRAPHICS_BUILT_IN="ETK_GRAPHICS_DIRECTFB_BUILT_IN"
					ETK_EXTRA_LIBS="$ETK_EXTRA_LIBS $etk_graphics_directfb_libs"
				fi
			], [:])
		fi
	;;
esac

AC_PATH_XTRA
if test "x$no_x" != xyes; then
  etk_graphics_x11=yes
  etk_graphics_x11_cflags="$X_CFLAGS"
  etk_graphics_x11_libs="$X_LIBS -lX11"

  have_xft=no
  have_xrender=no
  if test "$ac_cv_pkg_config_valid" = "yes"; then
	if test "$enable_xft_x11" = "yes"; then
		PKG_CHECK_MODULES(XFT, xft >= 2.0.0,
			[
				have_xft=yes
				AC_DEFINE(HAVE_XFT,1,[define if system have Xft])
			],
			[
				have_xft=no
			])
	fi
	if test "$enable_xrender_check" = "yes"; then
		PKG_CHECK_MODULES(XRENDER, xrender >= 0.6,
			[
				have_xrender=yes
			],
			[
				AC_CHECK_HEADER(X11/extensions/Xrender.h,
					[
						XRENDER_CFLAGS="$X_CFLAGS"
						XRENDER_LIBS="$X_LIBS -lXrender -lXext -lX11 $X_EXTRA_LIBS"
						have_xrender=yes
					],
					[
						have_xrender=no
					])
			])
	fi
  else
	if test "$enable_xrender_check" = "yes"; then
		AC_CHECK_HEADER(X11/extensions/Xrender.h,
			[
				XRENDER_CFLAGS="$X_CFLAGS"
				XRENDER_LIBS="$X_LIBS -lXrender -lXext -lX11 $X_EXTRA_LIBS"
				have_xrender=yes
			],
			[
				have_xrender=no
			])
	fi
  fi
  if test "x$have_xrender" = xyes; then
    AC_DEFINE(HAVE_XRENDER,1,[define if system have Xrender])
  fi

  AC_CHECK_HEADER(X11/Xpoll.h, [AC_DEFINE(HAVE_X11_XPOLL_H,1,[define if system have X11/Xpoll.h])], [])

  if test "x$have_xft" = xyes; then
    etk_graphics_x11_cflags="$XFT_CFLAGS"
    etk_graphics_x11_libs="$XFT_LIBS"
  else
    if test "x$have_xrender" = xyes; then
      etk_graphics_x11_cflags="$XRENDER_CFLAGS"
      etk_graphics_x11_libs="$XRENDER_LIBS"
    else
      etk_graphics_x11_cflags="$X_CFLAGS"
      etk_graphics_x11_libs="$X_LIBS -lX11"
    fi
  fi
  case $etk_native_os_extra in
	mingw)
		case " $etk_graphics_x11_libs " in
		*[[\ \	]]-lws2_32[[\ \	]]*) ;;
		*) etk_graphics_x11_libs="$etk_graphics_x11_libs -lws2_32" ;;
		esac
		;;
  esac

  if test "x$want_built_in_graphics" = xx11; then
    etk_built_in_graphics=x11
    ETK_GRAPHICS_BUILT_IN="ETK_GRAPHICS_X11_BUILT_IN"
    ETK_EXTRA_LIBS="$ETK_EXTRA_LIBS $etk_graphics_x11_libs"
  fi
fi

fi

AC_SUBST(ETK_GRAPHICS_BUILT_IN)

AM_CONDITIONAL(ETK_GRAPHICS_X11, [test "$etk_graphics_x11" = "yes"])
AM_CONDITIONAL(ETK_GRAPHICS_BEOS, [test "$etk_graphics_beos" = "yes"])
AM_CONDITIONAL(ETK_GRAPHICS_WIN32, [test "$etk_graphics_win32" = "yes"])
AM_CONDITIONAL(ETK_GRAPHICS_DIRECTFB, [test "$etk_graphics_directfb" = "yes"])
AM_CONDITIONAL(ETK_GRAPHICS_LINUXFB, [test "$etk_graphics_linuxfb" = "yes"])
AM_CONDITIONAL(ETK_GRAPHICS_CARBON, [test "$etk_graphics_carbon" = "yes"])
AM_CONDITIONAL(ETK_GRAPHICS_X11_BUILT_IN, [test "$etk_built_in_graphics" = "x11"])
AM_CONDITIONAL(ETK_GRAPHICS_BEOS_BUILT_IN, [test "$etk_built_in_graphics" = "beos"])
AM_CONDITIONAL(ETK_GRAPHICS_WIN32_BUILT_IN, [test "$etk_built_in_graphics" = "win32"])
AM_CONDITIONAL(ETK_GRAPHICS_DIRECTFB_BUILT_IN, [test "$etk_built_in_graphics" = "directfb"])
AM_CONDITIONAL(ETK_GRAPHICS_LINUXFB_BUILT_IN, [test "$etk_built_in_graphics" = "linuxfb"])
AM_CONDITIONAL(ETK_GRAPHICS_CARBON_BUILT_IN, [test "$etk_built_in_graphics" = "carbon"])

etk_graphics=
if test "x$etk_graphics_x11" = xyes; then
	ETK_GRAPHICS_X11_CFLAGS="$etk_graphics_x11_cflags"
	ETK_GRAPHICS_X11_LIBS="$etk_graphics_x11_libs"
	AC_SUBST(ETK_GRAPHICS_X11_CFLAGS)
	AC_SUBST(ETK_GRAPHICS_X11_LIBS)
	etk_graphics="$etk_graphics x11"
fi

if test "x$etk_graphics_beos" = xyes; then
	ETK_GRAPHICS_BEOS_CFLAGS="$etk_graphics_beos_cflags"
	ETK_GRAPHICS_BEOS_LIBS="$etk_graphics_beos_libs"
	AC_SUBST(ETK_GRAPHICS_BEOS_CFLAGS)
	AC_SUBST(ETK_GRAPHICS_BEOS_LIBS)
	etk_graphics="$etk_graphics beos"
fi

if test "x$etk_graphics_win32" = xyes; then
	ETK_GRAPHICS_WIN32_CFLAGS="$etk_graphics_win32_cflags"
	ETK_GRAPHICS_WIN32_LIBS="$etk_graphics_win32_libs"
	AC_SUBST(ETK_GRAPHICS_WIN32_CFLAGS)
	AC_SUBST(ETK_GRAPHICS_WIN32_LIBS)
	etk_graphics="$etk_graphics win32"
fi

if test "x$etk_graphics_directfb" = xyes; then
	ETK_GRAPHICS_DIRECTFB_CFLAGS="$etk_graphics_directfb_cflags"
	ETK_GRAPHICS_DIRECTFB_LIBS="$etk_graphics_directfb_libs"
	AC_SUBST(ETK_GRAPHICS_DIRECTFB_CFLAGS)
	AC_SUBST(ETK_GRAPHICS_DIRECTFB_LIBS)
	etk_graphics="$etk_graphics directfb"
fi

if test "x$etk_graphics_linuxfb" = xyes; then
	ETK_GRAPHICS_LINUXFB_CFLAGS="$etk_graphics_linuxfb_cflags"
	ETK_GRAPHICS_LINUXFB_LIBS="$etk_graphics_linuxfb_libs"
	AC_SUBST(ETK_GRAPHICS_LINUXFB_CFLAGS)
	AC_SUBST(ETK_GRAPHICS_LINUXFB_LIBS)
	etk_graphics="$etk_graphics linuxfb"
fi

if test "x$etk_graphics_carbon" = xyes; then
	ETK_GRAPHICS_CARBON_CFLAGS="$etk_graphics_carbon_cflags"
	ETK_GRAPHICS_CARBON_LIBS="$etk_graphics_carbon_libs"
	AC_SUBST(ETK_GRAPHICS_CARBON_CFLAGS)
	AC_SUBST(ETK_GRAPHICS_CARBON_LIBS)
	etk_graphics="$etk_graphics carbon"
fi

AC_MSG_CHECKING(for graphics implementation)
if test "x$etk_graphics" = x; then
	AC_MSG_RESULT(none available)
	AC_MSG_WARN("
                You do not have any known graphics implement on your computer.
                Most of interface kit won't work.")
else
	AC_MSG_RESULT($etk_graphics)
fi

AC_MSG_CHECKING(for built-in graphics implementation)
AC_MSG_RESULT($etk_built_in_graphics)

have_ft2=no
if test "x$enable_freetype" = xyes && test "$ac_cv_pkg_config_valid" = "yes"; then
	PKG_CHECK_MODULES(FREETYPE2, freetype2 >= 9.5.3,
		[
			have_ft2=yes
			AC_DEFINE(HAVE_FT2,1,[define if system have freetype2])
			ETK_EXTRA_LIBS="$ETK_EXTRA_LIBS $FREETYPE2_LIBS"
		], [:])
fi
AM_CONDITIONAL(HAVE_FT2, [test "$have_ft2" = "yes"])
AC_SUBST(FREETYPE2_CFLAGS)
AC_SUBST(FREETYPE2_LIBS)

# ***********************
# ***  thread checks  ***
# ***********************

AC_ARG_WITH(threads,
           [AC_HELP_STRING([--with-threads=@<:@posix/beos/win32@:>@],
                           [specify a thread implementation to use])],
           [if test "x$with_threads" = x; then
		want_threads=yes
	    else
		want_threads=$with_threads
	    fi],
	   [want_threads=yes])

# determination of thread implementation
# ***************************************

# have_threads=no   means no thread support
# have_threads=none means no default thread implementation

have_threads=no

if test "x$have_threads" = xno && (test "x$want_threads" = xyes || test "x$want_threads" = xwin32); then
  if test "x$want_threads" = xyes; then
	case $etk_native_os_extra in
		mingw|cygwin)
			have_threads=win32
		;;
	esac
  else
	have_threads=win32
  fi
fi

if test "x$have_threads" = xno && (test "x$want_threads" = xyes || test "x$want_threads" = xbeos); then
  if test "x$want_threads" = xyes; then
	case $etk_native_os in
		beos)
			have_threads=beos
		;;
	esac
  else
	have_threads=beos
  fi
fi


if test "x$have_threads" = xno && (test "x$want_threads" = xyes || test "x$want_threads" = xposix); then
  if test "x$want_threads" = xyes; then
	if test "$etk_native_os" = "unix" || test "$etk_native_os_extra" == "cygwin"; then
		have_threads=posix
	fi
  else
	have_threads=posix
  fi
fi

AC_MSG_CHECKING(for thread implementation)

if test "x$have_threads" = xno; then
	AC_MSG_RESULT(none available)
	AC_MSG_ERROR([
*** You do not have any known thread system on your
*** computer. ETK++ will not work!
])
else
	AC_MSG_RESULT($have_threads)
fi

# determination of ETK_THREAD_CFLAGS

ETK_THREAD_LIBS=
ETK_THREAD_CFLAGS=

# Test program for basic POSIX threads functionality
m4_define([etk_thread_test],[
#include <pthread.h> 
int check_me = 0;
void* func(void* data) {check_me = 42; return &check_me;}
int main()
 { pthread_t t; 
   void *ret;
   pthread_create (&t, $1, func, 0);
   pthread_join (t, &ret);
   exit (check_me != 42 || ret != &check_me);
}])

if test "x$have_threads" != xno; then

  if test "x$have_threads" = xposix; then
	if test "$etk_native_os_extra" = "cygwin"; then
		ETK_THREAD_CFLAGS="-D_REENTRANT"
		ETK_THREAD_LIBS="-lpthread"
	else
		if test "$etk_native_os_extra" != "darwin"; then
			# First we test for posix, whether -pthread or -pthreads do the trick as 
			# both CPPFLAG and LIBS. 
			# One of them does for most gcc versions and some other platforms/compilers
			# too and could be considered as the canonical way to go. 
			for flag in pthread pthreads; do
				etk_save_CFLAGS="$CFLAGS"
				CFLAGS="$CFLAGS -$flag"
				AC_TRY_RUN(etk_thread_test(0),
					   etk_flag_works=yes,
					   etk_flag_works=no,
					   [AC_LINK_IFELSE(etk_thread_test(0),
							   etk_flag_works=yes,
							   etk_flag_works=no)])
				CFLAGS="$etk_save_CFLAGS"
				if test $etk_flag_works = yes ; then
					ETK_THREAD_CFLAGS="-$flag"
					ETK_THREAD_LIBS="-$flag"
				fi
			done
		fi
	fi
  fi

  if test "x$ETK_THREAD_CFLAGS" = x; then
    # The canonical -pthread[s] does not work. Try something different.
    case $etk_native_os_extra in
	mingw)
		if test "x$have_threads" = xwin32 && test "$GCC" = "yes"; then
			# -mthreads for gcc however it using MSVCRT.DLL
			ETK_THREAD_CFLAGS="-mthreads"
			ETK_THREAD_LIBS="-mthreads"
		fi
		;;
	cygwin)
		if test "x$have_threads" = xwin32; then
			ETK_THREAD_CFLAGS="-D_REENTRANT"
		fi
		;;
	freebsd)
		ETK_THREAD_CFLAGS="-D_THREAD_SAFE -D_REENTRANT"
		ETK_THREAD_LIBS="-lc_r"
		;;
    esac
  fi

  etk_cv_thread_has_macro=no
  if test "x`echo $ETK_THREAD_CFLAGS | sed -e \"s/-D.*/\n-D/\" -e \"s/.*\n//\"`" = "x-D"; then
	etk_cv_thread_has_macro=yes
  fi

  if test "$etk_cv_thread_has_macro" = no; then
    AC_MSG_CHECKING(for whether system has MACRO to enable thread safety)
    etk_cv_thread_macro=no
    # if we are not finding the localtime_r function, then we probably are
    # not using the proper multithread flag
    etk_save_CPPFLAGS="$CPPFLAGS"
    CPPFLAGS="$CPPFLAGS $ETK_THREAD_CFLAGS"
    # First we test, whether localtime_r is declared in time.h
    # directly. Then we test whether a macro localtime_r exists, in
    # which case localtime_r in the test program is replaced and thus
    # if we still find localtime_r in the output, it is not defined as 
    # a macro.
    AC_EGREP_CPP([[^a-zA-Z1-9_]localtime_r[^a-zA-Z1-9_]], [#include <time.h>], ,
	[AC_EGREP_CPP([[^a-zA-Z1-9_]localtime_r[^a-zA-Z1-9_]],
		      [#include <time.h>
		       localtime_r(a,b)],
		      etk_cv_thread_macro=yes)])
    CPPFLAGS="$etk_save_CPPFLAGS"
    AC_MSG_RESULT([$etk_cv_thread_macro])
    if test "$etk_cv_thread_macro" = yes; then
	AC_MSG_WARN("
                I can't find the MACRO to enable thread safety on your
                platform (normally it's "_REENTRANT"). I'll not use any flag on
                compilation now, but then your programs might not work.
                Please provide information on how it is done on your system.")
    fi
  fi

  AC_MSG_CHECKING(thread related cflags)
  AC_MSG_RESULT($ETK_THREAD_CFLAGS)
  CPPFLAGS="$CPPFLAGS $ETK_THREAD_CFLAGS"
fi

# determination of ETK_THREAD_LIBS

case $have_threads in
        posix)
          if test x"$ETK_THREAD_LIBS" = x; then
            case $host in
              *)
                ETK_THREAD_LIBS=error
	        etk_save_LIBS="$LIBS"
	        for thread_lib in "" pthread pthread32 pthreads thread dce pthreadGC pthreadGC2; do
			if test x"$thread_lib" = x; then
				add_thread_lib=""
				IN=""
			else
				add_thread_lib="-l$thread_lib"
				IN=" in -l$thread_lib"
			fi

			defattr=0

			LIBS="$add_thread_lib $etk_save_LIBS"

			AC_MSG_CHECKING(for pthread_create/pthread_join$IN)
			AC_TRY_RUN(etk_thread_test($defattr),
                                   etk_result=yes,
                                   etk_result=no,
                                   [AC_LINK_IFELSE(etk_thread_test($defattr),
                                                   etk_result=yes,
                                                   etk_result=no)])
                        AC_MSG_RESULT($etk_result)

                        if test "$etk_result" = "yes" ; then
			  ETK_THREAD_LIBS="$add_thread_lib"
			  break
                        fi
		done
		if test "x$ETK_THREAD_LIBS" = xerror; then
		  AC_MSG_ERROR([
*** I can't find the libraries for the thread implementation
*** $have_threads . Please choose another thread implementation or
*** provide information on your thread implementation.])
		fi 
		LIBS="$etk_save_LIBS"
                ;;
            esac
          fi

	  ETK_THREAD_IMPL="ETK_THREAD_IMPL_POSIX"
          ;;
	win32)
	  ETK_THREAD_IMPL="ETK_THREAD_IMPL_WIN32"
	  ;;
	beos)
	  ETK_THREAD_IMPL="ETK_THREAD_IMPL_BEOS"
	  ETK_THREAD_LIBS="-lbe -lroot"
#	  case " $ETK_EXTRA_LIBS " in
#	    *[[\ \	]]-lbe[[\ \	]]*) ;;
#	    *) ETK_EXTRA_LIBS="$ETK_EXTRA_LIBS -lbe" ;;
#	  esac
#	  case " $ETK_EXTRA_LIBS " in
#	    *[[\ \	]]-lroot[[\ \	]]*) ;;
#	    *) ETK_EXTRA_LIBS="$ETK_EXTRA_LIBS -lroot" ;;
#	  esac
	  ;;
        *)
	  ETK_THREAD_IMPL="ETK_THREAD_IMPL_NONE"
          ETK_THREAD_LIBS=error
          ;;
esac

AM_CONDITIONAL(ETK_THREAD_IMPL_POSIX, [test "$ETK_THREAD_IMPL" = "ETK_THREAD_IMPL_POSIX"])
AM_CONDITIONAL(ETK_THREAD_IMPL_WIN32, [test "$ETK_THREAD_IMPL" = "ETK_THREAD_IMPL_WIN32"])
AM_CONDITIONAL(ETK_THREAD_IMPL_BEOS, [test "$ETK_THREAD_IMPL" = "ETK_THREAD_IMPL_BEOS"])

if test "x$ETK_THREAD_LIBS" = xerror; then
        AC_MSG_ERROR([
*** I can't find the libraries for the thread implementation
*** $have_threads . Please choose another thread implementation or
*** provide information on your thread implementation.])
fi

AC_MSG_CHECKING(thread related libraries)
AC_MSG_RESULT($ETK_THREAD_LIBS)

#
# Hack to deal with:
# 
#  a) GCC < 3.3 for Linux doesn't include -lpthread when
#     building shared libraries with linux.
#  b) libtool doesn't recognize -pthread as a library dependency.
#
case $host in
  *-*-linux*)
    ETK_THREAD_LIBS_FOR_THREAD="`echo $ETK_THREAD_LIBS | sed s/-pthread/-lpthread/`"
    ;;
  *)
    ETK_THREAD_LIBS_FOR_THREAD="`echo $ETK_THREAD_LIBS | sed s/-pthread/-Wc,-pthread/`"
    ;;
esac

# Test program for sem_timedwait
m4_define([etk_semaphore_test],[
#include <sys/time.h>
#include <time.h>
#include <semaphore.h> 
int main()
{
	sem_t t;
	int val;
	struct timespec ts;
	struct timeval tv;

	sem_init(&t, 0, 1);
	gettimeofday(&tv, NULL);
	ts.tv_sec = tv.tv_sec + 1;
	ts.tv_nsec = tv.tv_usec * 1000L;
	val = sem_timedwait(&t, &ts);
	sem_destroy(&t);

	exit(val != 0);
}])

if test "x$have_threads" = xposix; then
	etk_save_CFLAGS="$CFLAGS"
	etk_save_LIBS="$LIBS"
        for sem_lib in ""; do
		if test x"$sem_lib" = x; then
			add_sem_lib=""
			IN=""
		else
			add_sem_lib="-l$sem_lib"
			IN=" in -l$sem_lib"
		fi

		CFLAGS="$etk_save_CFLAGS $ETK_THREAD_CFLAGS"
		LIBS="$etk_save_LIBS $ETK_THREAD_LIBS $ETK_THREAD_LIBS_FOR_THREAD $add_sem_lib"

		AC_MSG_CHECKING(for sem_timedwait$IN)
		AC_TRY_RUN(etk_semaphore_test(0),
			   etk_result=yes,
			   etk_result=no,
			   [AC_LINK_IFELSE(etk_semaphore_test(0),
					   etk_result=yes,
					   etk_result=no)])
		AC_MSG_RESULT($etk_result)

		if test "$etk_result" = "yes" ; then
			ETK_THREAD_LIBS_FOR_THREAD="$ETK_THREAD_LIBS_FOR_THREAD $add_sem_lib"
			AC_DEFINE(HAVE_SEM_TIMEDWAIT,1,[define if system have sem_timedwait])
			break
		fi
	done
	CFLAGS="$etk_save_CFLAGS"
	LIBS="$etk_save_LIBS"
fi

# functions maybe need extra cflags/libs
etk_save_CFLAGS="$CFLAGS"
etk_save_LIBS="$LIBS"
CFLAGS="$etk_save_CFLAGS $etk_system_cflags $etk_extra_cflags"
LIBS="$etk_save_LIBS $etk_system_libs $etk_extra_libs"
AC_MSG_CHECKING(for clock_gettime)
AC_TRY_COMPILE([#include <time.h>], [clock_gettime(CLOCK_REALTIME, NULL);],
	       [AC_MSG_RESULT(yes); AC_DEFINE(HAVE_CLOCK_GETTIME,1,[define if system have clock_gettime])],
	       [AC_MSG_RESULT(no);])
AC_CHECK_FUNCS(shm_open)
CFLAGS="$etk_save_CFLAGS"
LIBS="$etk_save_LIBS"

AC_SUBST(ETK_THREAD_CFLAGS)
AC_SUBST(ETK_THREAD_LIBS)
AC_SUBST(ETK_THREAD_LIBS_FOR_THREAD)
AC_SUBST(ETK_THREAD_IMPL)

AC_SUBST(ETK_EXTRA_CFLAGS)
AC_SUBST(ETK_EXTRA_LIBS)

AC_SUBST(ETK_CFLAGS)
AC_SUBST(ETK_LIBS)

AC_OUTPUT_COMMANDS([

## Generate `ETKBuild.h' in two cases
## 1. `config.status' is run either explicitly, or via configure.
##     Esp. not when it is run in `Makefile' to generate makefiles and
##     config.h
## 2. CONFIG_OTHER is set explicitly
##
## Case 1 is difficult.  We know that `automake' sets one of
## CONFIG_FILES or CONFIG_HEADERS to empty.  This heuristic works
## only when AM_CONFIG_HEADER is set, however.

if test -n "${CONFIG_FILES}" && test -n "${CONFIG_HEADERS}"; then
  # Both CONFIG_FILES and CONFIG_HEADERS are non-empty ==> Case 1
  CONFIG_OTHER=${CONFIG_OTHER:-etk/ETKBuild.h}
fi
case "$CONFIG_OTHER" in
*etk/ETKBuild.h*)
	echo creating etk/ETKBuild.h
	outfile=etk/ETKBuild.h-tmp
	cat > $outfile <<\_______EOF
/* --------------------------------------------------------------------------
 *
 * ETK++ --- The Easy Toolkit for C++ programing
 * Copyright (C) 2004-2006, Anthony Lee, All Rights Reserved
 *
 * ETK++ library is a freeware; it may be used and distributed according to
 * the terms of The MIT License.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
 * IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * File: ETKBuild.h
 * Description: Building environment
 * Warning: This is a generated file.  Please modify 'configure.in'
 *
 * --------------------------------------------------------------------------*/

#ifndef __ETK_BUILD_H__
#define __ETK_BUILD_H__

_______EOF
	if test x$etk_sys_types_h = xyes; then
	  echo '#include <sys/types.h>' >> $outfile
	fi
	if test x$etk_limits_h = xyes; then
	  echo '#include <limits.h>' >> $outfile
	fi
	if test x$etk_unistd_h = xyes; then
	  if test x$etk_os = xwin32 && test x$etk_os_extra = xmingw; then
	    echo '#ifndef _MSC_VER
#include <unistd.h>
#endif /* _MSC_VER */' >> $outfile
	  else
	    echo '#include <unistd.h>' >> $outfile
	  fi
	fi
	if test x$etk_float_h = xyes; then
	  echo '#include <float.h>' >> $outfile
	fi
	if test x$etk_values_h = xyes; then
	  echo '#include <values.h>' >> $outfile
	fi
	cat >> $outfile <<_______EOF

$etk_os_defines
$etk_os_extra_defines

$etk_version_and_impl_define
$etk_memory_define

$etk_bzero_define

#include <stddef.h>

#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 8)
#define __GNUC_EXTENSION __extension__
#else
#define __GNUC_EXTENSION
#endif

#define E_MINFLOAT	$etk_mf
#define E_MAXFLOAT	$etk_Mf
#define E_MINDOUBLE	$etk_md
#define E_MAXDOUBLE	$etk_Md
#define E_MINSHORT	$etk_ms
#define E_MAXSHORT	$etk_Ms
#define E_MAXUSHORT	$etk_Mus
#define E_MININT	$etk_mi
#define E_MAXINT	$etk_Mi
#define E_MAXUINT	$etk_Mui
#define E_MINLONG	$etk_ml
#define E_MAXLONG	$etk_Ml
#define E_MAXULONG	$etk_Mul

_______EOF

	### this should always be true in a modern C/C++ compiler
	cat >>$outfile <<_______EOF
typedef signed char eint8;
typedef unsigned char euint8;
#define E_MININT8	((eint8)0x80)	
#define E_MAXINT8	((eint8)0x7f)
#define E_MAXUINT8	((euint8)0xff)
_______EOF


	if test -n "$int16"; then
	  cat >>$outfile <<_______EOF

typedef signed $int16 eint16;
typedef unsigned $int16 euint16;
typedef unsigned $int16 eunichar;
#define E_MININT16	((eint16)0x8000)
#define E_MAXINT16	((eint16)0x7fff)
#define E_MAXUINT16	((euint16)0xffff)
_______EOF
	fi

	if test -n "$int32"; then
	  cat >>$outfile <<_______EOF

typedef signed $int32 eint32;
typedef unsigned $int32 euint32;
typedef unsigned $int32 eunichar32;
#define E_MININT32	((eint32)0x80000000)
#define E_MAXINT32	((eint32)0x7fffffff)
#define E_MAXUINT32	((euint32)0xffffffff)
_______EOF
	fi

case $etk_os_extra in
  mingw)
    if test -n "$int64"; then
      etk_int64_define="
#ifndef _MSC_VER
${etk_extension}typedef signed $int64 eint64;
${etk_extension}typedef unsigned $int64 euint64;
#define E_INT64_CONSTANT(val)	$int64_constant
#define E_MININT64	((eint64)E_INT64_CONSTANT(0x8000000000000000))
#define E_MAXINT64	((eint64)E_INT64_CONSTANT(0x7fffffffffffffff))
#define E_MAXUINT64	((euint64)E_INT64_CONSTANT(0xffffffffffffffff))
#else
typedef signed __int64 eint64;
typedef unsigned __int64 euint64;
#define E_INT64_CONSTANT(val)	(val##i64)
#define E_MININT64	((eint64)E_INT64_CONSTANT(0x8000000000000000))
#define E_MAXINT64	((eint64)E_INT64_CONSTANT(0x7fffffffffffffff))
#define E_MAXUINT64	((euint64)E_INT64_CONSTANT(0xffffffffffffffff))
#endif /* _MSC_VER */"
    fi
    ;;
  *)
    if test -n "$int64"; then
      etk_int64_define="
${etk_extension}typedef signed $int64 eint64;
${etk_extension}typedef unsigned $int64 euint64;
#define E_INT64_CONSTANT(val)	$int64_constant
#define E_MININT64	((eint64)E_INT64_CONSTANT(0x8000000000000000))
#define E_MAXINT64	((eint64)E_INT64_CONSTANT(0x7fffffffffffffff))
#define E_MAXUINT64	((euint64)E_INT64_CONSTANT(0xffffffffffffffff))"
    fi
    ;;
esac

	if test "x$etk_int64_define" != "x" ; then
	cat >>$outfile <<_______EOF

$etk_int64_define

_______EOF
	fi

	if test x$etk_os = xwin32 && test x$etk_os_extra = xmingw; then
	  echo '#ifdef _MSC_VER
typedef long ssize_t;
#endif /* _MSC_VER */' >> $outfile
	fi
	echo "typedef $address_t e_address_t;" >> $outfile

	if test "x$etk_limits_h" = "xyes" ; then
	cat >>$outfile <<_______EOF

#if !defined(E_MAXPATH) && defined(PATH_MAX)
	#define E_MAXPATH	PATH_MAX
#endif

_______EOF
	fi

	if test x$etk_os = xwin32; then
	cat >>$outfile <<_______EOF

#if !defined(E_MAXPATH) && defined(_MSC_VER)
	#include <stdlib.h>
	#define E_MAXPATH	_MAX_PATH
#endif

_______EOF
	fi

	cat >>$outfile <<_______EOF

#ifndef E_MAXPATH
	#error "CAN NOT define E_MAXPATH!"
#endif

_______EOF

	cat >>$outfile <<_______EOF

#endif /* __ETK_BUILD_H__ */

_______EOF

	if cmp -s $outfile etk/ETKBuild.h; then
	  echo etk/ETKBuild.h is unchanged
	  rm -f $outfile
	else
	  mv $outfile etk/ETKBuild.h
	fi ;;
esac
],[

# Note that if two cases are the same, case goes with the first one.
# Note also that this is inside an AC_OUTPUT_COMMAND.  We do not depend
# on variable expansion in case labels.  Look at the generated config.status
# for a hint.

if test "x$enable_mem_tracing" = "xyes"; then
etk_memory_define="#define ETK_BUILD_WITH_MEMORY_TRACING"
else
etk_memory_define="/* #undef ETK_BUILD_WITH_MEMORY_TRACING */"
fi

case xyes in
x$ac_cv_header_sys_types_h)
  etk_sys_types_h=yes
  ;;
esac

case xyes in
x$ac_cv_header_unistd_h)
  etk_unistd_h=yes
  ;;
esac

case xyes in
x$ac_cv_header_float_h)
  etk_float_h=yes
  etk_mf=FLT_MIN etk_Mf=FLT_MAX
  etk_md=DBL_MIN etk_Md=DBL_MAX
  ;;
x$ac_cv_header_values_h)
  etk_values_h=yes
  etk_mf=MINFLOAT  etk_Mf=MAXFLOAT
  etk_md=MINDOUBLE etk_Md=MAXDOUBLE
  ;;
esac

case xyes in
x$ac_cv_header_limits_h)
  etk_limits_h=yes
  etk_ms=SHRT_MIN etk_Ms=SHRT_MAX etk_Mus=USHRT_MAX
  etk_mi=INT_MIN  etk_Mi=INT_MAX  etk_Mui=UINT_MAX
  etk_ml=LONG_MIN etk_Ml=LONG_MAX etk_Mul=ULONG_MAX
  ;;
x$ac_cv_header_values_h)
  etk_values_h=yes
  etk_ms=MINSHORT etk_Ms=MAXSHORT etk_Mus="(((unsigned short)E_MAXSHORT)*2+1)"
  etk_mi=MININT   etk_Mi=MAXINT   etk_Mui="(((unsigned int)E_MAXINT)*2+1)"
  etk_ml=MINLONG  etk_Ml=MAXLONG  etk_Mul="(((unsigned long)E_MAXLONG)*2+1)"
  ;;
esac

case 2 in
$ac_cv_sizeof_short)
  int16=short
  ;;
$ac_cv_sizeof_int)
  int16=int
  ;;
esac

case 4 in
$ac_cv_sizeof_short)
  int32=short
  ;;
$ac_cv_sizeof_int)
  int32=int
  ;;
$ac_cv_sizeof_long)
  int32=long
  ;;
esac

case 8 in
$ac_cv_sizeof_int)
  int64=int
  etk_extension=
  int64_constant='(val)'
  ;;
$ac_cv_sizeof_long)
  int64=long
  etk_extension=
  int64_constant='(val##L)'
  ;;
$ac_cv_sizeof_long_long)
  int64='long long'
  etk_extension='__GNUC_EXTENSION '
  int64_constant='(__GNUC_EXTENSION (val##LL))'
  ;;
$ac_cv_sizeof___int64)
  int64='__int64'
  etk_extension=
  int64_constant='(val##i64)'
  ;;
esac

if test x$etk_cv_bzero = xyes; then
  etk_bzero_define="#define HAVE_BZERO"
else
  etk_bzero_define="#undef HAVE_BZERO"
fi

address_t=$etk_cv_address_type

etk_version_and_impl_define="
#define ETK_MAJOR_VERSION $ETK_MAJOR_VERSION
#define ETK_MINOR_VERSION $ETK_MINOR_VERSION
#define ETK_MICRO_VERSION $ETK_MICRO_VERSION
#define ETK_INTERFACE_AGE $ETK_INTERFACE_AGE
#define ETK_BINARY_AGE    $ETK_BINARY_AGE

#define $ETK_THREAD_IMPL
#define $ETK_GRAPHICS_BUILT_IN

#define $ETK_ENDIAN
"

etk_os=$etk_native_os
case $etk_native_os in
  unix)
    etk_os_defines="#define ETK_OS_UNIX"
    ;;
  beos)
    etk_os_defines="#define ETK_OS_BEOS"
    ;;
  win32)
    etk_os_defines="#define ETK_OS_WIN32"
    ;;
  *)
    etk_os_defines="#define ETK_OS_UNKNOWN"
    ;;
esac

etk_os_extra=$etk_native_os_extra
case $etk_native_os_extra in
  linux)
    etk_os_extra_defines="#define ETK_OS_LINUX"
    ;;
  solaris)
    etk_os_extra_defines="#define ETK_OS_SOLARIS"
    ;;
  freebsd|freebsd6)
    etk_os_extra_defines="#define ETK_OS_FREEBSD"
    ;;
  darwin)
    etk_os_extra_defines="#define ETK_OS_DARWIN"
    ;;
  cygwin)
    etk_os_extra_defines="#define ETK_OS_CYGWIN"
    ;;
esac
])


AC_CONFIG_FILES([
Makefile
etk/Makefile
etk/etkxx.pc
etk/etkxx.rc
etk/config.h.msvc.win32
build/Makefile
build/debian/Makefile
build/rpm-specs/Makefile
build/rpm-specs/cygwin.spec
build/rpm-specs/mingw.spec
build/win32/Makefile
build/win32/etkxx/Makefile
build/win32/graphics/Makefile
build/win32/example/Makefile
etk/private/Makefile
etk/kernel/Makefile
etk/kernel/unix/Makefile
etk/kernel/win32/Makefile
etk/kernel/beos/Makefile
etk/kernel/thread/Makefile
etk/kernel/thread/posix/Makefile
etk/kernel/thread/win32/Makefile
etk/kernel/thread/beos/Makefile
etk/support/Makefile
etk/storage/Makefile
etk/storage/icons/Makefile
etk/xml/Makefile
etk/app/Makefile
etk/render/Makefile
etk/interface/Makefile
etk/interface/layout/Makefile
etk/interface/icons/Makefile
etk/interface/x11/Makefile
etk/interface/win32/Makefile
etk/interface/beos/Makefile
etk/interface/directfb/Makefile
etk/interface/wm/Makefile
etk/interface/linuxfb/Makefile
etk/interface/carbon/Makefile
etk/net/Makefile
etk/add-ons/Makefile
etk/add-ons/font/Makefile
etk/add-ons/graphics/Makefile
etk/add-ons/theme/Makefile
etk/m4macros/Makefile
tools/Makefile
tools/etkxx-config
manual/Makefile
example/Makefile
tests/Makefile
])

AC_OUTPUT
