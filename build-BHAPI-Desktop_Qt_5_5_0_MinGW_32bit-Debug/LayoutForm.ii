# 1 "../src/interface/layout/LayoutForm.cpp"
# 1 "C:\\Documents and Settings\\stasiek.TC12\\My Documents\\prc++\\x86_libraries\\be\\BHAPI\\build-BHAPI-Desktop_Qt_5_5_0_MinGW_32bit-Debug//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "../src/interface/layout/LayoutForm.cpp"
# 30 "../src/interface/layout/LayoutForm.cpp"
# 1 "../src/interface/layout/Layout.h" 1
# 33 "../src/interface/layout/Layout.h"
# 1 "../src/interface/layout/./../../support/List.h" 1
# 34 "../src/interface/layout/./../../support/List.h"
# 1 "../src/interface/layout/./../../support/./../support/SupportDefs.h" 1
# 34 "../src/interface/layout/./../../support/./../support/SupportDefs.h"
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/string.h" 1 3
# 9 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/string.h" 3
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/crtdefs.h" 1 3
# 10 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/crtdefs.h" 3
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw.h" 1 3
# 12 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw.h" 3
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw_mac.h" 1 3
# 13 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw.h" 2 3
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw_secapi.h" 1 3
# 47 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw_secapi.h" 3
extern "C++" {
template <bool __test, typename __dsttype>
  struct __if_array;
template <typename __dsttype>
  struct __if_array <true, __dsttype> {
    typedef __dsttype __type;
};
}
# 14 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw.h" 2 3
# 282 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw.h" 3
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/vadefs.h" 1 3
# 9 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/vadefs.h" 3
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw.h" 1 3
# 686 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw.h" 3
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/sdks/_mingw_directx.h" 1 3
# 687 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw.h" 2 3
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/sdks/_mingw_ddk.h" 1 3
# 688 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw.h" 2 3
# 10 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/vadefs.h" 2 3


#pragma pack(push,_CRT_PACKING)



extern "C" {





  typedef __builtin_va_list __gnuc_va_list;






  typedef __gnuc_va_list va_list;
# 97 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/vadefs.h" 3
}



#pragma pack(pop)
# 283 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw.h" 2 3


#pragma pack(push,_CRT_PACKING)
# 379 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw.h" 3
typedef unsigned int size_t;
# 389 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw.h" 3
typedef int ssize_t;
# 401 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw.h" 3
typedef int intptr_t;
# 414 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw.h" 3
typedef unsigned int uintptr_t;
# 427 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw.h" 3
typedef int ptrdiff_t;
# 443 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw.h" 3
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
# 463 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw.h" 3
typedef int errno_t;




typedef long __time32_t;




__extension__ typedef long long __time64_t;





typedef __time32_t time_t;
# 651 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw.h" 3
extern "C" {




void __attribute__((__cdecl__)) __debugbreak(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void __attribute__((__cdecl__)) __debugbreak(void)
{
  __asm__ __volatile__("int {$}3":);
}




const char *__mingw_get_crt_info (void);


}



#pragma pack(pop)
# 11 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/crtdefs.h" 2 3
# 26 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/crtdefs.h" 3
typedef size_t rsize_t;
# 153 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/crtdefs.h" 3
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct {
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
} _locale_tstruct,*_locale_t;



typedef struct tagLC_ID {
  unsigned short wLanguage;
  unsigned short wCountry;
  unsigned short wCodePage;
} LC_ID,*LPLC_ID;




typedef struct threadlocaleinfostruct {
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned long lc_handle[6];
  LC_ID lc_id[6];
  struct {
    char *locale;
    wchar_t *wlocale;
    int *refcount;
    int *wrefcount;
  } lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  struct lconv *lconv;
  int *ctype1_refcount;
  unsigned short *ctype1;
  const unsigned short *pctype;
  const unsigned char *pclmap;
  const unsigned char *pcumap;
  struct __lc_time_data *lc_time_curr;
} threadlocinfo;
# 10 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/string.h" 2 3


extern "C" {
# 36 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/string.h" 3
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _memccpy(void *_Dst,const void *_Src,int _Val,size_t _MaxCount);
  void *__attribute__((__cdecl__)) memchr(const void *_Buf ,int _Val,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _memicmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _memicmp_l(const void *_Buf1,const void *_Buf2,size_t _Size,_locale_t _Locale);
  int __attribute__((__cdecl__)) memcmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  void * __attribute__((__cdecl__)) memcpy(void * __restrict__ _Dst,const void * __restrict__ _Src,size_t _Size) ;
  void * __attribute__((__cdecl__)) mempcpy (void *_Dst, const void *_Src, size_t _Size);
  void * __attribute__((__cdecl__)) memset(void *_Dst,int _Val,size_t _Size);

  void * __attribute__((__cdecl__)) memccpy(void *_Dst,const void *_Src,int _Val,size_t _Size) ;
  int __attribute__((__cdecl__)) memicmp(const void *_Buf1,const void *_Buf2,size_t _Size) ;


  char * __attribute__((__cdecl__)) _strset(char *_Str,int _Val) ;
  char * __attribute__((__cdecl__)) _strset_l(char *_Str,int _Val,_locale_t _Locale) ;
  char * __attribute__((__cdecl__)) strcpy(char * __restrict__ _Dest,const char * __restrict__ _Source);
  char * __attribute__((__cdecl__)) strcat(char * __restrict__ _Dest,const char * __restrict__ _Source);
  int __attribute__((__cdecl__)) strcmp(const char *_Str1,const char *_Str2);
  size_t __attribute__((__cdecl__)) strlen(const char *_Str);
  size_t __attribute__((__cdecl__)) strnlen(const char *_Str,size_t _MaxCount);
  void *__attribute__((__cdecl__)) memmove(void *_Dst,const void *_Src,size_t _Size) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strdup(const char *_Src);
  char *__attribute__((__cdecl__)) strchr(const char *_Str,int _Val);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricmp(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strcmpi(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricmp_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  int __attribute__((__cdecl__)) strcoll(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strcoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricoll(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strncoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strncoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) strcspn(const char *_Str,const char *_Control);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strerror(const char *_ErrMsg) ;
  char *__attribute__((__cdecl__)) strerror(int) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strlwr(char *_String) ;
  char *strlwr_l(char *_String,_locale_t _Locale) ;
  char *__attribute__((__cdecl__)) strncat(char * __restrict__ _Dest,const char * __restrict__ _Source,size_t _Count) ;
  int __attribute__((__cdecl__)) strncmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicmp_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  char *strncpy(char * __restrict__ _Dest,const char * __restrict__ _Source,size_t _Count) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strnset(char *_Str,int _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strnset_l(char *str,int c,size_t count,_locale_t _Locale) ;
  char *__attribute__((__cdecl__)) strpbrk(const char *_Str,const char *_Control);
  char *__attribute__((__cdecl__)) strrchr(const char *_Str,int _Ch);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strrev(char *_Str);
  size_t __attribute__((__cdecl__)) strspn(const char *_Str,const char *_Control);
  char *__attribute__((__cdecl__)) strstr(const char *_Str,const char *_SubStr);
  char *__attribute__((__cdecl__)) strtok(char * __restrict__ _Str,const char * __restrict__ _Delim) ;
       

  char *strtok_r(char * __restrict__ _Str, const char * __restrict__ _Delim, char ** __restrict__ __last);
       
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strupr(char *_String) ;
  __attribute__ ((__dllimport__)) char *_strupr_l(char *_String,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) strxfrm(char * __restrict__ _Dst,const char * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _strxfrm_l(char * __restrict__ _Dst,const char * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);


  char *__attribute__((__cdecl__)) strdup(const char *_Src) ;
  int __attribute__((__cdecl__)) strcmpi(const char *_Str1,const char *_Str2) ;
  int __attribute__((__cdecl__)) stricmp(const char *_Str1,const char *_Str2) ;
  char *__attribute__((__cdecl__)) strlwr(char *_Str) ;
  int __attribute__((__cdecl__)) strnicmp(const char *_Str1,const char *_Str,size_t _MaxCount) ;
  int __attribute__((__cdecl__)) strncasecmp (const char *, const char *, size_t);
  int __attribute__((__cdecl__)) strcasecmp (const char *, const char *);

  inline int __attribute__((__cdecl__)) strncasecmp (const char *__sz1, const char *__sz2, size_t __sizeMaxCompare) { return _strnicmp (__sz1, __sz2, __sizeMaxCompare); }
  inline int __attribute__((__cdecl__)) strcasecmp (const char *__sz1, const char *__sz2) { return _stricmp (__sz1, __sz2); }




  char *__attribute__((__cdecl__)) strnset(char *_Str,int _Val,size_t _MaxCount) ;
  char *__attribute__((__cdecl__)) strrev(char *_Str) ;
  char *__attribute__((__cdecl__)) strset(char *_Str,int _Val) ;
  char *__attribute__((__cdecl__)) strupr(char *_Str) ;





  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsdup(const wchar_t *_Str);
  wchar_t *__attribute__((__cdecl__)) wcscat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
  wchar_t *__attribute__((__cdecl__)) wcschr(const wchar_t *_Str,wchar_t _Ch);
  int __attribute__((__cdecl__)) wcscmp(const wchar_t *_Str1,const wchar_t *_Str2);
  wchar_t *__attribute__((__cdecl__)) wcscpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
  size_t __attribute__((__cdecl__)) wcscspn(const wchar_t *_Str,const wchar_t *_Control);
  size_t __attribute__((__cdecl__)) wcslen(const wchar_t *_Str);
  size_t __attribute__((__cdecl__)) wcsnlen(const wchar_t *_Src,size_t _MaxCount);
  wchar_t *wcsncat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  int __attribute__((__cdecl__)) wcsncmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  wchar_t *wcsncpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  wchar_t *__attribute__((__cdecl__)) _wcsncpy_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count,_locale_t _Locale) ;
  wchar_t *__attribute__((__cdecl__)) wcspbrk(const wchar_t *_Str,const wchar_t *_Control);
  wchar_t *__attribute__((__cdecl__)) wcsrchr(const wchar_t *_Str,wchar_t _Ch);
  size_t __attribute__((__cdecl__)) wcsspn(const wchar_t *_Str,const wchar_t *_Control);
  wchar_t *__attribute__((__cdecl__)) wcsstr(const wchar_t *_Str,const wchar_t *_SubStr);
  wchar_t *__attribute__((__cdecl__)) wcstok(wchar_t * __restrict__ _Str,const wchar_t * __restrict__ _Delim) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcserror(int _ErrNum) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) __wcserror(const wchar_t *_Str) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsrev(wchar_t *_Str);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsset(wchar_t *_Str,wchar_t _Val) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcslwr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcslwr_l(wchar_t *_String,_locale_t _Locale) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsupr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcsupr_l(wchar_t *_String,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcsxfrm(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcsxfrm_l(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) wcscoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcscoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsncoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsncoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);


  wchar_t *__attribute__((__cdecl__)) wcsdup(const wchar_t *_Str) ;

  int __attribute__((__cdecl__)) wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2) ;
  int __attribute__((__cdecl__)) wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount) ;
  wchar_t *__attribute__((__cdecl__)) wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  wchar_t *__attribute__((__cdecl__)) wcsrev(wchar_t *_Str) ;
  wchar_t *__attribute__((__cdecl__)) wcsset(wchar_t *_Str,wchar_t _Val) ;
  wchar_t *__attribute__((__cdecl__)) wcslwr(wchar_t *_Str) ;
  wchar_t *__attribute__((__cdecl__)) wcsupr(wchar_t *_Str) ;
  int __attribute__((__cdecl__)) wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2) ;




}


# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/sec_api/string_s.h" 1 3
# 9 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/sec_api/string_s.h" 3
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/string.h" 1 3
# 10 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/sec_api/string_s.h" 2 3




extern "C" {


  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strset_s(char *_Dst,size_t _DstSize,int _Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strerror_s(char *_Buf,size_t _SizeInBytes,const char *_ErrMsg);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strerror_s(char *_Buf,size_t _SizeInBytes,int _ErrNum);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strlwr_s(char *_Str,size_t _Size);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strlwr_s_l(char *_Str,size_t _Size,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strnset_s(char *_Str,size_t _Size,int _Val,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strupr_s(char *_Str,size_t _Size);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strupr_s_l(char *_Str,size_t _Size,_locale_t _Locale);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strncat_s(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strncat_s_l(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount,_locale_t _Locale);
  extern "C" { __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strcpy_s(char * _Dst, size_t _SizeInBytes, const char * _Src); } extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) strcpy_s( char (&_Dst)[__size], const char * (_Src)) { return ::strcpy_s(_Dst,__size,_Src); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strncpy_s(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strncpy_s_l(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) strtok_s(char *_Str,const char *_Delim,char **_Context);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strtok_s_l(char *_Str,const char *_Delim,char **_Context,_locale_t _Locale);
  extern "C" { __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strcat_s(char * strDestination, size_t numberOfElements, const char * strSource); } extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) strcat_s( char (&strDestination)[__size], const char * (strSource)) { return ::strcat_s(strDestination,__size,strSource); } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) memmove_s(void *_dest,size_t _numberOfElements,const void *_src,size_t _count);


  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) wcstok_s(wchar_t *_Str,const wchar_t *_Delim,wchar_t **_Context);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcserror_s(wchar_t *_Buf,size_t _SizeInWords,int _ErrNum);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) __wcserror_s(wchar_t *_Buffer,size_t _SizeInWords,const wchar_t *_ErrMsg);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsnset_s(wchar_t *_Dst,size_t _DstSizeInWords,wchar_t _Val,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsset_s(wchar_t *_Str,size_t _SizeInWords,wchar_t _Val);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcslwr_s(wchar_t *_Str,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcslwr_s_l(wchar_t *_Str,size_t _SizeInWords,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsupr_s(wchar_t *_Str,size_t _Size);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsupr_s_l(wchar_t *_Str,size_t _Size,_locale_t _Locale);

  extern "C" { __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcscpy_s(wchar_t * _Dst, size_t _nElem, const wchar_t * _Src); } extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) wcscpy_s( wchar_t (&_Dst)[__size], const wchar_t * (_Src)) { return ::wcscpy_s(_Dst,__size,_Src); } }
  extern "C" { __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcscat_s(wchar_t * _Dst, size_t _nElem, const wchar_t * _Src); } extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) wcscat_s( wchar_t (&_Dst)[__size], const wchar_t * (_Src)) { return ::wcscat_s(_Dst,__size,_Src); } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcsncat_s(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsncat_s_l(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcsncpy_s(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsncpy_s_l(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcstok_s_l(wchar_t *_Str,const wchar_t *_Delim,wchar_t **_Context,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsset_s_l(wchar_t *_Str,size_t _SizeInChars,unsigned int _Val,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsnset_s_l(wchar_t *_Str,size_t _SizeInChars,unsigned int _Val, size_t _Count,_locale_t _Locale);





  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) memcpy_s (void *_dest,size_t _numberOfElements,const void *_src,size_t _count);



}
# 181 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/string.h" 2 3
# 35 "../src/interface/layout/./../../support/./../support/SupportDefs.h" 2
# 1 "C:/Qt/Tools/mingw492_32/lib/gcc/i686-w64-mingw32/4.9.2/include-fixed/limits.h" 1 3 4
# 34 "C:/Qt/Tools/mingw492_32/lib/gcc/i686-w64-mingw32/4.9.2/include-fixed/limits.h" 3 4
# 1 "C:/Qt/Tools/mingw492_32/lib/gcc/i686-w64-mingw32/4.9.2/include-fixed/syslimits.h" 1 3 4






# 1 "C:/Qt/Tools/mingw492_32/lib/gcc/i686-w64-mingw32/4.9.2/include-fixed/limits.h" 1 3 4
# 168 "C:/Qt/Tools/mingw492_32/lib/gcc/i686-w64-mingw32/4.9.2/include-fixed/limits.h" 3 4
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/limits.h" 1 3 4
# 169 "C:/Qt/Tools/mingw492_32/lib/gcc/i686-w64-mingw32/4.9.2/include-fixed/limits.h" 2 3 4
# 8 "C:/Qt/Tools/mingw492_32/lib/gcc/i686-w64-mingw32/4.9.2/include-fixed/syslimits.h" 2 3 4
# 35 "C:/Qt/Tools/mingw492_32/lib/gcc/i686-w64-mingw32/4.9.2/include-fixed/limits.h" 2 3 4
# 36 "../src/interface/layout/./../../support/./../support/SupportDefs.h" 2
# 1 "../src/interface/layout/./../../support/./../support/Errors.h" 1
# 33 "../src/interface/layout/./../../support/./../support/Errors.h"
# 1 "C:/Qt/Tools/mingw492_32/lib/gcc/i686-w64-mingw32/4.9.2/include-fixed/limits.h" 1 3 4
# 34 "../src/interface/layout/./../../support/./../support/Errors.h" 2
# 42 "../src/interface/layout/./../../support/./../support/Errors.h"
enum {
 E_NO_MEMORY = (-2147483647 - 1),
 E_IO_ERROR,
 E_PERMISSION_DENIED,
 E_BAD_INDEX,
 E_BAD_TYPE,
 E_BAD_VALUE,
 E_MISMATCHED_VALUES,
 E_NAME_NOT_FOUND,
 E_NAME_IN_USE,
 E_TIMED_OUT,
 E_INTERRUPTED,
 E_WOULD_BLOCK,
 E_CANCELED,
 E_NO_INIT,
 E_BUSY,
 E_NOT_ALLOWED,

 E_ERROR = -1,
 E_OK = 1,
 E_NO_ERROR = 1
};


enum {
 E_BAD_SEM_ID = (-2147483647 - 1) + 0x1000,
 E_NO_MORE_SEMS,

 E_BAD_THREAD_ID = (-2147483647 - 1) + 0x1000 + 0x100,
 E_NO_MORE_THREADS,
 E_BAD_THREAD_STATE,
 E_BAD_TEAM_ID,
 E_NO_MORE_TEAMS,

 E_BAD_PORT_ID = (-2147483647 - 1) + 0x1000 + 0x200,
 E_NO_MORE_PORTS,

 E_BAD_IMAGE_ID = (-2147483647 - 1) + 0x1000 + 0x300,
 E_BAD_ADDRESS,
 E_NOT_AN_EXECUTABLE,
 E_MISSING_LIBRARY,
 E_MISSING_SYMBOL,

 E_DEBUGGER_ALREADY_INSTALLED = (-2147483647 - 1) + 0x1000 + 0x400
};


enum {
 E_BAD_REPLY = (-2147483647 - 1) + 0x2000,
 E_DUPLICATE_REPLY,
 E_MESSAGE_TO_SELF,
 E_BAD_HANDLER,
 E_ALREADY_RUNNING,
};


enum {
 E_FILE_ERROR = (-2147483647 - 1) + 0x3000,
 E_ENTRY_NOT_FOUND,
 E_LINK_LIMIT,
 E_NAME_TOO_LONG,
};
# 37 "../src/interface/layout/./../../support/./../support/SupportDefs.h" 2
# 45 "../src/interface/layout/./../../support/./../support/SupportDefs.h"
typedef char32_t eunichar32;
typedef char16_t eunichar;

typedef char eint8;
typedef unsigned char euint8;
typedef short eint16;
typedef unsigned short euint16;
typedef int eint32;
typedef unsigned int euint32;
typedef long long eint64;
typedef unsigned long long euint64;

typedef eint32 e_status_t;
typedef euint32 e_type_code;
typedef euint32 e_perform_code;
typedef eint64 e_bigtime_t;
typedef eint64 e_thread_id;
typedef size_t e_address_t;

enum {
    E_ANY_TYPE = 'ANYT',
 E_BOOL_TYPE = 'BOOL',
 E_CHAR_TYPE = 'CHAR',
 E_DOUBLE_TYPE = 'DBLE',
 E_FLOAT_TYPE = 'FLOT',
 E_INT64_TYPE = 'LLNG',
 E_INT32_TYPE = 'LONG',
 E_INT16_TYPE = 'SHRT',
 E_INT8_TYPE = 'BYTE',
 E_MESSAGE_TYPE = 'MSGG',
 E_MESSENGER_TYPE = 'MSNG',
 E_POINTER_TYPE = 'PNTR',
 E_SIZE_T_TYPE = 'SIZT',
 E_SSIZE_T_TYPE = 'SSZT',
 E_STRING_TYPE = 'CSTR',
 E_UINT64_TYPE = 'ULLG',
 E_UINT32_TYPE = 'ULNG',
 E_UINT16_TYPE = 'USHT',
 E_UINT8_TYPE = 'UBYT',
 E_POINT_TYPE = 'SPNT',
    E_RECT_TYPE = 'RECT',
    E_MIME_TYPE = 'MIME',
 E_UNKNOWN_TYPE = 'UNKN'
};
# 188 "../src/interface/layout/./../../support/./../support/SupportDefs.h"
extern "C" {


extern const euint8 etk_major_version;
extern const euint8 etk_minor_version;
extern const euint8 etk_micro_version;
extern const euint8 etk_interface_age;
extern const euint16 etk_binary_age;


}
# 228 "../src/interface/layout/./../../support/./../support/SupportDefs.h"
enum {
 E_SEEK_SET = 0,
 E_SEEK_CUR,
 E_SEEK_END,
};


# 1 "../src/interface/layout/./../../support/./../support/./../kernel/Debug.h" 1
# 33 "../src/interface/layout/./../../support/./../support/./../kernel/Debug.h"
# 1 "C:/Qt/Tools/mingw492_32/lib/gcc/i686-w64-mingw32/4.9.2/include/stdarg.h" 1 3 4
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdarg.h" 1 3 4
# 140 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdarg.h" 3 4
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/_mingw_stdarg.h" 1 3 4
# 141 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdarg.h" 2 3 4
# 2 "C:/Qt/Tools/mingw492_32/lib/gcc/i686-w64-mingw32/4.9.2/include/stdarg.h" 2 3 4
# 34 "../src/interface/layout/./../../support/./../support/./../kernel/Debug.h" 2
# 1 "C:/Qt/Tools/mingw492_32/lib/gcc/i686-w64-mingw32/4.9.2/include/stddef.h" 1 3 4
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stddef.h" 1 3 4
# 13 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stddef.h" 3 4
extern "C" {




  __attribute__ ((__dllimport__)) extern int *__attribute__((__cdecl__)) _errno(void);

  errno_t __attribute__((__cdecl__)) _set_errno(int _Value);
  errno_t __attribute__((__cdecl__)) _get_errno(int *_Value);


  __attribute__ ((__dllimport__)) extern unsigned long __attribute__((__cdecl__)) __threadid(void);

  __attribute__ ((__dllimport__)) extern uintptr_t __attribute__((__cdecl__)) __threadhandle(void);


}
# 423 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
# 2 "C:/Qt/Tools/mingw492_32/lib/gcc/i686-w64-mingw32/4.9.2/include/stddef.h" 2 3 4
# 35 "../src/interface/layout/./../../support/./../support/./../kernel/Debug.h" 2
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 1 3
# 10 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 3
# 1 "C:/Qt/Tools/mingw492_32/lib/gcc/i686-w64-mingw32/4.9.2/include-fixed/limits.h" 1 3 4
# 11 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 2 3





#pragma pack(push,_CRT_PACKING)


extern "C" {
# 40 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 3
  typedef int (__attribute__((__cdecl__)) *_onexit_t)(void);
# 50 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 3
  typedef struct _div_t {
    int quot;
    int rem;
  } div_t;

  typedef struct _ldiv_t {
    long quot;
    long rem;
  } ldiv_t;





#pragma pack(4)
  typedef struct {
    unsigned char ld[10];
  } _LDOUBLE;
#pragma pack()



  typedef struct {
    double x;
  } _CRT_DOUBLE;

  typedef struct {
    float f;
  } _CRT_FLOAT;

       


  typedef struct {
    long double x;
  } _LONGDOUBLE;

       

#pragma pack(4)
  typedef struct {
    unsigned char ld12[12];
  } _LDBL12;
#pragma pack()
# 105 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 3
  extern int * _imp____mb_cur_max;
# 131 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 3
  typedef void (__attribute__((__cdecl__)) *_purecall_handler)(void);

  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _set_purecall_handler(_purecall_handler _Handler);
  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _get_purecall_handler(void);

  typedef void (__attribute__((__cdecl__)) *_invalid_parameter_handler)(const wchar_t *,const wchar_t *,const wchar_t *,unsigned int,uintptr_t);
  __attribute__ ((__dllimport__)) _invalid_parameter_handler __attribute__((__cdecl__)) _set_invalid_parameter_handler(_invalid_parameter_handler _Handler);
  __attribute__ ((__dllimport__)) _invalid_parameter_handler __attribute__((__cdecl__)) _get_invalid_parameter_handler(void);
# 147 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 3
  __attribute__ ((__dllimport__)) unsigned long *__attribute__((__cdecl__)) __doserrno(void);

  errno_t __attribute__((__cdecl__)) _set_doserrno(unsigned long _Value);
  errno_t __attribute__((__cdecl__)) _get_doserrno(unsigned long *_Value);




  extern __attribute__ ((__dllimport__)) char *_sys_errlist[1];
  extern __attribute__ ((__dllimport__)) int _sys_nerr;


  __attribute__ ((__dllimport__)) int *__attribute__((__cdecl__)) __p___argc(void);
  __attribute__ ((__dllimport__)) char ***__attribute__((__cdecl__)) __p___argv(void);
  __attribute__ ((__dllimport__)) wchar_t ***__attribute__((__cdecl__)) __p___wargv(void);
  __attribute__ ((__dllimport__)) char ***__attribute__((__cdecl__)) __p__environ(void);
  __attribute__ ((__dllimport__)) wchar_t ***__attribute__((__cdecl__)) __p__wenviron(void);
  __attribute__ ((__dllimport__)) char **__attribute__((__cdecl__)) __p__pgmptr(void);
  __attribute__ ((__dllimport__)) wchar_t **__attribute__((__cdecl__)) __p__wpgmptr(void);





  extern int * _imp____argc;







  extern char *** _imp____argv;







  extern wchar_t *** _imp____wargv;
# 199 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 3
  extern char *** _imp___environ;
# 208 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 3
  extern wchar_t *** _imp___wenviron;
# 217 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 3
  extern char ** _imp___pgmptr;
# 226 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 3
  extern wchar_t ** _imp___wpgmptr;



  errno_t __attribute__((__cdecl__)) _get_pgmptr(char **_Value);
  errno_t __attribute__((__cdecl__)) _get_wpgmptr(wchar_t **_Value);




  extern int * _imp___fmode;



  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_fmode(int _Mode);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_fmode(int *_PMode);





  extern unsigned int * _imp___osplatform;
# 256 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 3
  extern unsigned int * _imp___osver;
# 265 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 3
  extern unsigned int * _imp___winver;
# 274 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 3
  extern unsigned int * _imp___winmajor;
# 283 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 3
  extern unsigned int * _imp___winminor;




  errno_t __attribute__((__cdecl__)) _get_osplatform(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_osver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winmajor(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winminor(unsigned int *_Value);




  extern "C++" {
    template <typename _CountofType,size_t _SizeOfArray> char (*__countof_helper( _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

  }





  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) exit(int _Code) __attribute__ ((__noreturn__));
  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _exit(int _Code) __attribute__ ((__noreturn__));



  void __attribute__((__cdecl__)) _Exit(int) __attribute__ ((__noreturn__));

  inline __attribute__ ((__noreturn__)) void __attribute__((__cdecl__)) _Exit(int status)
  { _exit(status); }



       

  void __attribute__((__cdecl__)) __attribute__((noreturn)) abort(void);
       



  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _set_abort_behavior(unsigned int _Flags,unsigned int _Mask);



  int __attribute__((__cdecl__)) abs(int _X);
  long __attribute__((__cdecl__)) labs(long _X);


  __extension__ long long __attribute__((__cdecl__)) _abs64(long long);

  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) long long __attribute__((__cdecl__)) _abs64(long long x) {
    return __builtin_llabs(x);
  }


  int __attribute__((__cdecl__)) atexit(void (__attribute__((__cdecl__)) *)(void));


  double __attribute__((__cdecl__)) atof(const char *_String);
  double __attribute__((__cdecl__)) _atof_l(const char *_String,_locale_t _Locale);

  int __attribute__((__cdecl__)) atoi(const char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoi_l(const char *_Str,_locale_t _Locale);
  long __attribute__((__cdecl__)) atol(const char *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _atol_l(const char *_Str,_locale_t _Locale);


  void *__attribute__((__cdecl__)) bsearch(const void *_Key,const void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));
  void __attribute__((__cdecl__)) qsort(void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));

  unsigned short __attribute__((__cdecl__)) _byteswap_ushort(unsigned short _Short);
  unsigned long __attribute__((__cdecl__)) _byteswap_ulong (unsigned long _Long);
  __extension__ unsigned long long __attribute__((__cdecl__)) _byteswap_uint64(unsigned long long _Int64);
  div_t __attribute__((__cdecl__)) div(int _Numerator,int _Denominator);
  char *__attribute__((__cdecl__)) getenv(const char *_VarName) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _itoa(int _Value,char *_Dest,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _i64toa(long long _Val,char *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ui64toa(unsigned long long _Val,char *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _atoi64(const char *_String);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _atoi64_l(const char *_String,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _strtoi64(const char *_String,char **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _strtoi64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _strtoui64(const char *_String,char **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _strtoui64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  ldiv_t __attribute__((__cdecl__)) ldiv(long _Numerator,long _Denominator);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ltoa(long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) mblen(const char *_Ch,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mblen_l(const char *_Ch,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen(const char *_Str);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen_l(const char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen(const char *_Str,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen_l(const char *_Str,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) mbtowc(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mbtowc_l(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) mbstowcs(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstowcs_l(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) rand(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_error_mode(int _Mode);
  void __attribute__((__cdecl__)) srand(unsigned int _Seed);
# 404 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 3
  double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtod(const char * __restrict__ _Str,char ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtof(const char * __restrict__ nptr, char ** __restrict__ endptr);

  long double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtold(const char * __restrict__ , char ** __restrict__ );


  extern double __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
  __strtod (const char * __restrict__ , char ** __restrict__);




  float __attribute__((__cdecl__)) __mingw_strtof (const char * __restrict__, char ** __restrict__);
  double __attribute__((__cdecl__)) __mingw_strtod (const char * __restrict__, char ** __restrict__);
  long double __attribute__((__cdecl__)) __mingw_strtold(const char * __restrict__, char ** __restrict__);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _strtod_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,_locale_t _Locale);
  long __attribute__((__cdecl__)) strtol(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _strtol_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) strtoul(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _strtoul_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);


  int __attribute__((__cdecl__)) system(const char *_Command);

  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ultoa(unsigned long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) wctomb(char *_MbCh,wchar_t _WCh) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wctomb_l(char *_MbCh,wchar_t _WCh,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcstombs(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcstombs_l(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale) ;



  void *__attribute__((__cdecl__)) calloc(size_t _NumOfElements,size_t _SizeOfElements);
  void __attribute__((__cdecl__)) free(void *_Memory);
  void *__attribute__((__cdecl__)) malloc(size_t _Size);
  void *__attribute__((__cdecl__)) realloc(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _recalloc(void *_Memory,size_t _Count,size_t _Size);


       
       


  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _aligned_free(void *_Memory);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_malloc(size_t _Size,size_t _Alignment);
       
       

  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_malloc(size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_realloc(void *_Memory,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_realloc(void *_Memory,size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment,size_t _Offset);





  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _itow(int _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ltow(long _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ultow(unsigned long _Value,wchar_t *_Dest,int _Radix) ;

  double __attribute__((__cdecl__)) __mingw_wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) __mingw_wcstof(const wchar_t * __restrict__ nptr, wchar_t ** __restrict__ endptr);
  long double __attribute__((__cdecl__)) __mingw_wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);
# 482 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 3
  double __attribute__((__cdecl__)) wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) wcstof(const wchar_t * __restrict__ nptr, wchar_t ** __restrict__ endptr);


  long double __attribute__((__cdecl__)) wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wcstod_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,_locale_t _Locale);
  long __attribute__((__cdecl__)) wcstol(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wcstol_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) wcstoul(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _wcstoul_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wgetenv(const wchar_t *_VarName) ;


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wsystem(const wchar_t *_Command);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol_l(const wchar_t *_Str,_locale_t _Locale);

  __extension__ __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _i64tow(long long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ui64tow(unsigned long long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wtoi64(const wchar_t *_Str);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wtoi64_l(const wchar_t *_Str,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wcstoi64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wcstoi64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _wcstoui64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _wcstoui64_l(const wchar_t *_Str ,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);




  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fullpath(char *_FullPath,const char *_Path,size_t _SizeInBytes);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl(_CRT_DOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl(_LDOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt(_CRT_FLOAT *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl_l(_CRT_DOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl_l(_LDOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt_l(_CRT_FLOAT *_Result,char *_Str,_locale_t _Locale);
       
       






  unsigned long __attribute__((__cdecl__)) _lrotl(unsigned long _Val,int _Shift);
  unsigned long __attribute__((__cdecl__)) _lrotr(unsigned long _Val,int _Shift);

       
       

  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _makepath(char *_Path,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  _onexit_t __attribute__((__cdecl__)) _onexit(_onexit_t _Func);



  void __attribute__((__cdecl__)) perror(const char *_ErrMsg);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putenv(const char *_EnvString);
       
       


  __extension__ unsigned long long __attribute__((__cdecl__)) _rotl64(unsigned long long _Val,int _Shift);
  __extension__ unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long Value,int Shift);
       
       
       
       


  unsigned int __attribute__((__cdecl__)) _rotr(unsigned int _Val,int _Shift);
  unsigned int __attribute__((__cdecl__)) _rotl(unsigned int _Val,int _Shift);
       
       
  __extension__ unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long _Val,int _Shift);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _searchenv(const char *_Filename,const char *_EnvVar,char *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _splitpath(const char *_FullPath,char *_Drive,char *_Dir,char *_Filename,char *_Ext) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _swab(char *_Buf1,char *_Buf2,int _SizeInBytes);



  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wfullpath(wchar_t *_FullPath,const wchar_t *_Path,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wmakepath(wchar_t *_ResultPath,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);


  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wperror(const wchar_t *_ErrMsg);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wputenv(const wchar_t *_EnvString);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsearchenv(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsplitpath(const wchar_t *_FullPath,wchar_t *_Drive,wchar_t *_Dir,wchar_t *_Filename,wchar_t *_Ext) ;


  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _beep(unsigned _Frequency,unsigned _Duration) __attribute__ ((__deprecated__));

  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _seterrormode(int _Mode) __attribute__ ((__deprecated__));
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _sleep(unsigned long _Duration) __attribute__ ((__deprecated__));
# 607 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 3
  char *__attribute__((__cdecl__)) ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  char *__attribute__((__cdecl__)) itoa(int _Val,char *_DstBuf,int _Radix) ;
  char *__attribute__((__cdecl__)) ltoa(long _Val,char *_DstBuf,int _Radix) ;
  int __attribute__((__cdecl__)) putenv(const char *_EnvString) ;



  void __attribute__((__cdecl__)) swab(char *_Buf1,char *_Buf2,int _SizeInBytes) ;


  char *__attribute__((__cdecl__)) ultoa(unsigned long _Val,char *_Dstbuf,int _Radix) ;
  _onexit_t __attribute__((__cdecl__)) onexit(_onexit_t _Func);





  typedef struct { __extension__ long long quot, rem; } lldiv_t;

  __extension__ lldiv_t __attribute__((__cdecl__)) lldiv(long long, long long);

  __extension__ long long __attribute__((__cdecl__)) llabs(long long);

  __extension__ inline long long __attribute__((__cdecl__)) llabs(long long _j) { return (_j >= 0 ? _j : -_j); }


  __extension__ long long __attribute__((__cdecl__)) strtoll(const char * __restrict__, char ** __restrict, int);
  __extension__ unsigned long long __attribute__((__cdecl__)) strtoull(const char * __restrict__, char ** __restrict__, int);


  __extension__ long long __attribute__((__cdecl__)) atoll (const char *);


  __extension__ long long __attribute__((__cdecl__)) wtoll (const wchar_t *);
  __extension__ char *__attribute__((__cdecl__)) lltoa (long long, char *, int);
  __extension__ char *__attribute__((__cdecl__)) ulltoa (unsigned long long , char *, int);
  __extension__ wchar_t *__attribute__((__cdecl__)) lltow (long long, wchar_t *, int);
  __extension__ wchar_t *__attribute__((__cdecl__)) ulltow (unsigned long long, wchar_t *, int);



  __extension__ inline long long __attribute__((__cdecl__)) atoll (const char * _c) { return _atoi64 (_c); }
  __extension__ inline char *__attribute__((__cdecl__)) lltoa (long long _n, char * _c, int _i) { return _i64toa (_n, _c, _i); }
  __extension__ inline char *__attribute__((__cdecl__)) ulltoa (unsigned long long _n, char * _c, int _i) { return _ui64toa (_n, _c, _i); }
  __extension__ inline long long __attribute__((__cdecl__)) wtoll (const wchar_t * _w) { return _wtoi64 (_w); }
  __extension__ inline wchar_t *__attribute__((__cdecl__)) lltow (long long _n, wchar_t * _w, int _i) { return _i64tow (_n, _w, _i); }
  __extension__ inline wchar_t *__attribute__((__cdecl__)) ulltow (unsigned long long _n, wchar_t * _w, int _i) { return _ui64tow (_n, _w, _i); }






}


#pragma pack(pop)

# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/sec_api/stdlib_s.h" 1 3
# 9 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/sec_api/stdlib_s.h" 3
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 1 3
# 10 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/sec_api/stdlib_s.h" 2 3




extern "C" {


  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _dupenv_s(char **_PBuffer,size_t *_PBufferSizeInBytes,const char *_VarName);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _itoa_s(int _Value,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _i64toa_s(long long _Val,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ui64toa_s(unsigned long long _Val,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ltoa_s(long _Val,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) mbstowcs_s(size_t *_PtNumOfCharConverted,wchar_t *_DstBuf,size_t _SizeInWords,const char *_SrcBuf,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _mbstowcs_s_l(size_t *_PtNumOfCharConverted,wchar_t *_DstBuf,size_t _SizeInWords,const char *_SrcBuf,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ultoa_s(unsigned long _Val,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wctomb_s_l(int *_SizeConverted,char *_MbCh,size_t _SizeInBytes,wchar_t _WCh,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcstombs_s(size_t *_PtNumOfCharConverted,char *_Dst,size_t _DstSizeInBytes,const wchar_t *_Src,size_t _MaxCountInBytes);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcstombs_s_l(size_t *_PtNumOfCharConverted,char *_Dst,size_t _DstSizeInBytes,const wchar_t *_Src,size_t _MaxCountInBytes,_locale_t _Locale);



  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _itow_s (int _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ltow_s (long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ultow_s (unsigned long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wgetenv_s(size_t *_ReturnSize,wchar_t *_DstBuf,size_t _DstSizeInWords,const wchar_t *_VarName);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wdupenv_s(wchar_t **_Buffer,size_t *_BufferSizeInWords,const wchar_t *_VarName);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _i64tow_s(long long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ui64tow_s(unsigned long long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);



  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ecvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDights,int *_PtDec,int *_PtSign);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _fcvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDec,int *_PtDec,int *_PtSign);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _gcvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDigits);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _makepath_s(char *_PathResult,size_t _Size,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _putenv_s(const char *_Name,const char *_Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _searchenv_s(const char *_Filename,const char *_EnvVar,char *_ResultPath,size_t _SizeInBytes);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _splitpath_s(const char *_FullPath,char *_Drive,size_t _DriveSize,char *_Dir,size_t _DirSize,char *_Filename,size_t _FilenameSize,char *_Ext,size_t _ExtSize);
  extern "C++" { template <size_t __drive_size, size_t __dir_size, size_t __name_size, size_t __ext_size> inline errno_t __attribute__((__cdecl__)) _splitpath_s(const char *_Dest, char (&__drive)[__drive_size], char (&__dir)[__dir_size], char (&__name)[__name_size], char (&__ext)[__ext_size]) { return _splitpath_s(_Dest, __drive, __drive_size, __dir, __dir_size, __name, __name_size, __ext, __ext_size); } }



  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wmakepath_s(wchar_t *_PathResult,size_t _SizeInWords,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wputenv_s(const wchar_t *_Name,const wchar_t *_Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wsearchenv_s(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath,size_t _SizeInWords);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wsplitpath_s(const wchar_t *_FullPath,wchar_t *_Drive,size_t _DriveSizeInWords,wchar_t *_Dir,size_t _DirSizeInWords,wchar_t *_Filename,size_t _FilenameSizeInWords,wchar_t *_Ext,size_t _ExtSizeInWords);
  extern "C++" { template <size_t __drive_size, size_t __dir_size, size_t __name_size, size_t __ext_size> inline errno_t __attribute__((__cdecl__)) _wsplitpath_s(const wchar_t *_Dest, wchar_t (&__drive)[__drive_size], wchar_t (&__dir)[__dir_size], wchar_t (&__name)[__name_size], wchar_t (&__ext)[__ext_size]) { return _wsplitpath_s(_Dest, __drive, __drive_size, __dir, __dir_size, __name, __name_size, __ext, __ext_size); } }





}
# 668 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 2 3
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/malloc.h" 1 3
# 11 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/malloc.h" 3
#pragma pack(push,_CRT_PACKING)


extern "C" {
# 46 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/malloc.h" 3
  typedef struct _heapinfo {
    int *_pentry;
    size_t _size;
    int _useflag;
  } _HEAPINFO;


  extern unsigned int _amblksiz;
# 65 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/malloc.h" 3
       
       
# 97 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/malloc.h" 3
       
       




void * __mingw_aligned_malloc (size_t _Size, size_t _Alignment);
void __mingw_aligned_free (void *_Memory);
void * __mingw_aligned_offset_realloc (void *_Memory, size_t _Size, size_t _Alignment, size_t _Offset);
void * __mingw_aligned_realloc (void *_Memory, size_t _Size, size_t _Offset);



  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _resetstkoflw (void);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _set_malloc_crt_max_wait(unsigned long _NewValue);

  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _expand(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _msize(void *_Memory);






  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _get_sbh_threshold(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_sbh_threshold(size_t _NewValue);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_amblksiz(size_t _Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_amblksiz(size_t *_Value);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapadd(void *_Memory,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapchk(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapmin(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapset(unsigned int _Fill);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapwalk(_HEAPINFO *_EntryInfo);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _heapused(size_t *_Used,size_t *_Commit);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _get_heap_handle(void);
# 144 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/malloc.h" 3
  static __inline void *_MarkAllocaS(void *_Ptr,unsigned int _Marker) {
    if(_Ptr) {
      *((unsigned int*)_Ptr) = _Marker;
      _Ptr = (char*)_Ptr + 8;
    }
    return _Ptr;
  }
# 163 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/malloc.h" 3
  static __inline void __attribute__((__cdecl__)) _freea(void *_Memory) {
    unsigned int _Marker;
    if(_Memory) {
      _Memory = (char*)_Memory - 8;
      _Marker = *(unsigned int *)_Memory;
      if(_Marker==0xDDDD) {
 free(_Memory);
      }





    }
  }
# 206 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/malloc.h" 3
}


#pragma pack(pop)
# 669 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/stdlib.h" 2 3
# 36 "../src/interface/layout/./../../support/./../support/./../kernel/Debug.h" 2


# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/new" 1 3
# 37 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/new" 3
       
# 38 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/new" 3

# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/i686-w64-mingw32/bits/c++config.h" 1 3
# 186 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/i686-w64-mingw32/bits/c++config.h" 3
namespace std
{
  typedef unsigned int size_t;
  typedef int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 430 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/i686-w64-mingw32/bits/c++config.h" 3
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/i686-w64-mingw32/bits/os_defines.h" 1 3
# 431 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/i686-w64-mingw32/bits/c++config.h" 2 3


# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/i686-w64-mingw32/bits/cpu_defines.h" 1 3
# 434 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/i686-w64-mingw32/bits/c++config.h" 2 3
# 40 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/new" 2 3
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/exception" 1 3
# 33 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/exception" 3
       
# 34 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/exception" 3

#pragma GCC visibility push(default)


# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/bits/atomic_lockfree_defines.h" 1 3
# 33 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/bits/atomic_lockfree_defines.h" 3
       
# 34 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/bits/atomic_lockfree_defines.h" 3
# 39 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/exception" 2 3

extern "C++" {

namespace std
{
# 60 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/exception" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;



    virtual const char* what() const noexcept;
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char* what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) noexcept;



  unexpected_handler get_unexpected() noexcept;




  void unexpected() __attribute__ ((__noreturn__));
# 127 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/exception" 3
  bool uncaught_exception() noexcept __attribute__ ((__pure__));


}

namespace __gnu_cxx
{

# 152 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop


# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/bits/exception_ptr.h" 1 3
# 34 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/bits/exception_ptr.h" 3
#pragma GCC visibility push(default)


# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/bits/exception_defines.h" 1 3
# 38 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/bits/exception_ptr.h" 2 3





extern "C++" {

namespace std
{
  class type_info;





  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {




    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }
# 111 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/bits/exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 138 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/bits/exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&)
 noexcept __attribute__ ((__pure__));

      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };

    bool
    operator==(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }

  }



  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {
      try
 {

   throw __ex;

 }
      catch(...)
 {
   return current_exception();
 }
    }





  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) noexcept __attribute__ ((__deprecated__));

  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) noexcept
    { return std::make_exception_ptr<_Ex>(__ex); }


}

}

#pragma GCC visibility pop
# 163 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/exception" 2 3
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/bits/nested_exception.h" 1 3
# 33 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/bits/nested_exception.h" 3
#pragma GCC visibility push(default)
# 45 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/bits/nested_exception.h" 3
extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) = default;

    nested_exception& operator=(const nested_exception&) = default;

    virtual ~nested_exception() noexcept;

    void
    rethrow_nested() const __attribute__ ((__noreturn__))
    { rethrow_exception(_M_ptr); }

    exception_ptr
    nested_ptr() const
    { return _M_ptr; }
  };

  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };

  template<typename _Ex>
    struct __get_nested_helper
    {
      static const nested_exception*
      _S_get(const _Ex& __ex)
      { return dynamic_cast<const nested_exception*>(&__ex); }
    };

  template<typename _Ex>
    struct __get_nested_helper<_Ex*>
    {
      static const nested_exception*
      _S_get(const _Ex* __ex)
      { return dynamic_cast<const nested_exception*>(__ex); }
    };

  template<typename _Ex>
    inline const nested_exception*
    __get_nested_exception(const _Ex& __ex)
    { return __get_nested_helper<_Ex>::_S_get(__ex); }

  template<typename _Ex>
    void
    __throw_with_nested(_Ex&&, const nested_exception* = 0)
    __attribute__ ((__noreturn__));

  template<typename _Ex>
    void
    __throw_with_nested(_Ex&&, ...) __attribute__ ((__noreturn__));




  template<typename _Ex>
    inline void
    __throw_with_nested(_Ex&& __ex, const nested_exception*)
    { throw __ex; }

  template<typename _Ex>
    inline void
    __throw_with_nested(_Ex&& __ex, ...)
    { throw _Nested_exception<_Ex>(static_cast<_Ex&&>(__ex)); }

  template<typename _Ex>
    void
    throw_with_nested(_Ex __ex) __attribute__ ((__noreturn__));



  template<typename _Ex>
    inline void
    throw_with_nested(_Ex __ex)
    {
      if (__get_nested_exception(__ex))
        throw __ex;
      __throw_with_nested(static_cast<_Ex&&>(__ex), &__ex);
    }


  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    {
      if (const nested_exception* __nested = __get_nested_exception(__ex))
        __nested->rethrow_nested();
    }


  inline void
  rethrow_if_nested(const nested_exception& __ex)
  { __ex.rethrow_nested(); }


}

}



#pragma GCC visibility pop
# 164 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/exception" 2 3
# 41 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { };



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };





  class bad_array_length : public bad_alloc
  {
  public:
    bad_array_length() throw() { };



    virtual ~bad_array_length() throw();


    virtual const char* what() const throw();
  };


  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 128 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/c++/new" 3
void* operator new(std::size_t)
  __attribute__((__externally_visible__));
void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));
void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));


inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

}

#pragma GCC visibility pop
# 39 "../src/interface/layout/./../../support/./../support/./../kernel/Debug.h" 2


# 1 "../src/interface/layout/./../../support/./../support/./../kernel/./../support/SupportDefs.h" 1
# 42 "../src/interface/layout/./../../support/./../support/./../kernel/Debug.h" 2
# 57 "../src/interface/layout/./../../support/./../support/./../kernel/Debug.h"
extern "C" {


typedef enum etk_debug_level {
 DEBUG_NORMAL,
 DEBUG_OUTPUT,
 DEBUG_WARNING,
 DEBUG_ERROR
} etk_debug_level;

 void etk_debug_log(etk_debug_level level, const char *format, va_list ap);
# 83 "../src/interface/layout/./../../support/./../support/./../kernel/Debug.h"
 void ETK_DEBUG(const char *format, ...);



 void ETK_OUTPUT(const char *format, ...);
# 103 "../src/interface/layout/./../../support/./../support/./../kernel/Debug.h"
 void ETK_WARNING(const char *format, ...);



 void ETK_ERROR(const char *format, ...);
# 121 "../src/interface/layout/./../../support/./../support/./../kernel/Debug.h"
}
# 236 "../src/interface/layout/./../../support/./../support/SupportDefs.h" 2
# 35 "../src/interface/layout/./../../support/List.h" 2



class EList {
public:





 EList(eint32 initialAllocSize = 0);
 EList(eint32 initialAllocSize, eint32 nullItems);



 EList(const EList &list);
 EList &operator=(const EList &from);

 virtual ~EList();

 bool AddItem(void *item);
 bool AddItem(void *item, eint32 atIndex);
 bool AddList(const EList *newItems);
 bool AddList(const EList *newItems, eint32 atIndex);


 bool RemoveItem(void *item);
 void *RemoveItem(eint32 index);
 bool RemoveItems(eint32 index, eint32 count);


 bool ReplaceItem(eint32 index, void *newItem, void **oldItem = __null);

 void MakeEmpty();

 bool SwapItems(eint32 indexA, eint32 indexB);
 bool MoveItem(eint32 fromIndex, eint32 toIndex);

 void SortItems(int (*cmp)(const void *a, const void *b));

 void *ItemAt(eint32 index) const;
 void *FirstItem() const;
 void *LastItem() const;

 bool HasItem(void *item) const;
 eint32 IndexOf(void *item) const;
 eint32 CountItems() const;
 bool IsEmpty() const;

 void DoForEach(bool (*func)(void *data));
 void DoForEach(bool (*func)(void *data, void *user_data), void *user_data);


 void **Items() const;

private:
 void **fObjects;

 eint32 fItemCount;
 eint32 fItemReal;
 eint32 fMinimumCount;

 bool _Resize(eint32 count);
};
# 34 "../src/interface/layout/Layout.h" 2
# 1 "../src/interface/layout/./../../interface/InterfaceDefs.h" 1
# 33 "../src/interface/layout/./../../interface/InterfaceDefs.h"
# 1 "../src/interface/layout/./../../interface/./../interface/GraphicsDefs.h" 1
# 33 "../src/interface/layout/./../../interface/./../interface/GraphicsDefs.h"
# 1 "../src/interface/layout/./../../interface/./../interface/./../support/SupportDefs.h" 1
# 34 "../src/interface/layout/./../../interface/./../interface/GraphicsDefs.h" 2


typedef struct e_pattern {
 euint8 data[8];

 inline bool operator==(const e_pattern& o) const
 {
  return (*((const euint64*)this)) == (*((const euint64*)&o));
 }

 inline bool operator!=(const e_pattern& o) const
 {
  return (*((const euint64*)this)) != (*((const euint64*)&o));
 }

} e_pattern;



inline e_pattern e_make_pattern(euint8 d1, euint8 d2, euint8 d3, euint8 d4, euint8 d5, euint8 d6, euint8 d7, euint8 d8)
{
 e_pattern p;
 p.data[0] = d1;
 p.data[1] = d2;
 p.data[2] = d3;
 p.data[3] = d4;
 p.data[4] = d5;
 p.data[5] = d6;
 p.data[6] = d7;
 p.data[7] = d8;
 return p;
}




extern "C" {


extern const e_pattern E_SOLID_HIGH;
extern const e_pattern E_MIXED_COLORS;
extern const e_pattern E_SOLID_LOW;


}



typedef struct e_rgb_color {
 euint8 red;
 euint8 green;
 euint8 blue;
 euint8 alpha;


 inline e_rgb_color& set_to(euint8 r, euint8 g, euint8 b, euint8 a = 0xff)
 {
  red = r; green = g; blue = b; alpha = a;
  return *this;
 }

 inline e_rgb_color& set_to(const e_rgb_color& o)
 {
  return set_to(o.red, o.green, o.blue, o.alpha);
 }

 inline bool operator==(const e_rgb_color& o) const
 {
  return(*((const euint32*)this)) == (*((const euint32*)&o));
 }

 inline bool operator!=(const e_rgb_color& o) const
 {
  return(*((const euint32*)this)) != (*((const euint32*)&o));
 }

 e_rgb_color& mix(euint8 r, euint8 g, euint8 b, euint8 a);
 e_rgb_color& mix(const e_rgb_color &o);
 e_rgb_color& mix_copy(euint8 r, euint8 g, euint8 b, euint8 a) const;
 e_rgb_color& mix_copy(const e_rgb_color &o) const;

 e_rgb_color& disable(euint8 r, euint8 g, euint8 b, euint8 a);
 e_rgb_color& disable(const e_rgb_color &background);
 e_rgb_color& disable_copy(euint8 r, euint8 g, euint8 b, euint8 a) const;
 e_rgb_color& disable_copy(const e_rgb_color &background) const;

} e_rgb_color;



inline e_rgb_color e_make_rgb_color(euint8 r, euint8 g, euint8 b, euint8 a = 0xff)
{
 e_rgb_color c;
 c.set_to(r, g, b, a);
 return c;
}



typedef enum e_drawing_mode {
 E_OP_COPY,
 E_OP_XOR,

 E_OP_OVER,
 E_OP_ERASE,
 E_OP_INVERT,
 E_OP_ADD,
 E_OP_SUBTRACT,
 E_OP_BLEND,
 E_OP_MIN,
 E_OP_MAX,
 E_OP_SELECT,
 E_OP_ALPHA,
} e_drawing_mode;


typedef enum e_color_space {
 E_CMAP8 = 0,
 E_RGB32 = 1,
 E_RGBA32 = 2,
 E_RGB24 = 3,
 E_RGB24_BIG = 4,
} e_color_space;



extern "C" {


extern const e_rgb_color E_TRANSPARENT_COLOR;
extern const euint32 E_TRANSPARENT_MAGIC_RGBA32;

 euint8 etk_find_index_for_color(euint8 r, euint8 g, euint8 b);
 e_rgb_color etk_find_color_for_index(euint8 index);


}
# 34 "../src/interface/layout/./../../interface/InterfaceDefs.h" 2

enum {
 E_FOLLOW_NONE = 0,
 E_FOLLOW_LEFT = 1,
 E_FOLLOW_RIGHT = 1 << 1,
 E_FOLLOW_TOP = 1 << 2,
 E_FOLLOW_BOTTOM = 1 << 3,
 E_FOLLOW_H_CENTER = 1 << 4,
 E_FOLLOW_V_CENTER = 1 << 5,
 E_FOLLOW_ALL = 0xffff
};





enum {
 E_BACKSPACE = 0x08,
 E_RETURN = 0x0a,
 E_ENTER = 0x0a,
 E_SPACE = 0x20,
 E_TAB = 0x09,
 E_ESCAPE = 0x1b,

 E_LEFT_ARROW = 0x1c,
 E_RIGHT_ARROW = 0x1d,
 E_UP_ARROW = 0x1e,
 E_DOWN_ARROW = 0x1f,

 E_INSERT = 0x05,
 E_DELETE = 0x7f,
 E_HOME = 0x01,
 E_END = 0x04,
 E_PAGE_UP = 0x0b,
 E_PAGE_DOWN = 0x0c,

 E_FUNCTION_KEY = 0x10
};

enum {
 E_F1_KEY = 0x02,
 E_F2_KEY = 0x03,
 E_F3_KEY = 0x04,
 E_F4_KEY = 0x05,
 E_F5_KEY = 0x06,
 E_F6_KEY = 0x07,
 E_F7_KEY = 0x08,
 E_F8_KEY = 0x09,
 E_F9_KEY = 0x0a,
 E_F10_KEY = 0x0b,
 E_F11_KEY = 0x0c,
 E_F12_KEY = 0x0d,
 E_PRINT_KEY = 0x0e,
 E_SCROLL_KEY = 0x0f,
 E_PAUSE_KEY = 0x10
};

enum e_border_style {
 E_PLAIN_BORDER,
 E_FANCY_BORDER,
 E_NO_BORDER
};

enum e_orientation {
 E_HORIZONTAL,
 E_VERTICAL
};

enum e_join_mode {
 E_ROUND_JOIN = 0,
 E_MITER_JOIN,
 E_BEVEL_JOIN,
 E_BUTT_JOIN,
 E_SQUARE_JOIN
};

enum e_cap_mode {
 E_ROUND_CAP = E_ROUND_JOIN,
 E_BUTT_CAP = E_BUTT_JOIN,
 E_SQUARE_CAP = E_SQUARE_JOIN
};

enum e_alignment {
 E_ALIGN_LEFT,
 E_ALIGN_RIGHT,
 E_ALIGN_CENTER
};

enum e_vertical_alignment {
 E_ALIGN_TOP,
 E_ALIGN_BOTTOM,
 E_ALIGN_MIDDLE
};

enum {
 E_SHIFT_KEY = 1 << 1,
 E_COMMAND_KEY = 1 << 2,
 E_CONTROL_KEY = 1 << 3,
 E_CAPS_LOCK = 1 << 4,
 E_SCROLL_LOCK = 1 << 5,
 E_NUM_LOCK = 1 << 6,
 E_OPTION_KEY = 1 << 7,
 E_MENU_KEY = 1 << 8,
 E_LEFT_SHIFT_KEY = 1 << 9,
 E_RIGHT_SHIFT_KEY = 1 << 10,
 E_LEFT_COMMAND_KEY = 1 << 11,
 E_RIGHT_COMMAND_KEY = 1 << 12,
 E_LEFT_CONTROL_KEY = 1 << 13,
 E_RIGHT_CONTROL_KEY = 1 << 14,
 E_LEFT_OPTION_KEY = 1 << 15,
 E_RIGHT_OPTION_KEY = 1 << 16,
 E_FUNCTIONS_KEY = 1 << 17
};

enum {
 E_PRIMARY_MOUSE_BUTTON = 1,
 E_SECONDARY_MOUSE_BUTTON = 2,
 E_TERTIARY_MOUSE_BUTTON = 3
};

typedef enum e_color_which {
 E_DESKTOP_COLOR = 0,

 E_PANEL_BACKGROUND_COLOR = 1,
 E_PANEL_TEXT_COLOR = 2,

 E_DOCUMENT_BACKGROUND_COLOR = 3,
 E_DOCUMENT_TEXT_COLOR = 4,
 E_DOCUMENT_HIGHLIGHT_COLOR = 5,
 E_DOCUMENT_CURSOR_COLOR = 6,

 E_BUTTON_BACKGROUND_COLOR = 7,
 E_BUTTON_TEXT_COLOR = 8,
 E_BUTTON_BORDER_COLOR = 9,

 E_NAVIGATION_BASE_COLOR = 10,
 E_NAVIGATION_PULSE_COLOR = 11,

 E_MENU_BACKGROUND_COLOR = 12,
 E_MENU_BORDER_COLOR = 13,
 E_MENU_SELECTED_BACKGROUND_COLOR = 14,
 E_MENU_ITEM_TEXT_COLOR = 15,
 E_MENU_SELECTED_ITEM_TEXT_COLOR = 16,
 E_MENU_SELECTED_BORDER_COLOR = 17,

 E_TOOLTIP_BACKGROUND_COLOR = 18,
 E_TOOLTIP_TEXT_COLOR = 19,

 E_SHINE_COLOR = 20,
 E_SHADOW_COLOR = 21,

 E_STATUSBAR_COLOR = 22,

} e_color_which;


enum e_button_width {
 E_WIDTH_AS_USUAL,
 E_WIDTH_FROM_LABEL
};



extern "C" {


 e_rgb_color e_ui_color(e_color_which which);
 float e_ui_get_scrollbar_horizontal_height();
 float e_ui_get_scrollbar_vertical_width();


}
# 35 "../src/interface/layout/Layout.h" 2
# 1 "../src/interface/layout/./../../interface/Region.h" 1
# 34 "../src/interface/layout/./../../interface/Region.h"
# 1 "../src/interface/layout/./../../interface/./../support/List.h" 1
# 35 "../src/interface/layout/./../../interface/Region.h" 2
# 1 "../src/interface/layout/./../../interface/./../interface/Rect.h" 1
# 33 "../src/interface/layout/./../../interface/./../interface/Rect.h"
# 1 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 1 3
# 10 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3
       
# 11 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3




struct _exception;

#pragma pack(push,_CRT_PACKING)
# 76 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3
extern "C" {







  typedef union __mingw_dbl_type_t {
    double x;
    unsigned long long val;
    __extension__ struct {
      unsigned int low, high;
    } lh;
  } __mingw_dbl_type_t;

  typedef union __mingw_flt_type_t {
    float x;
    unsigned int val;
  } __mingw_flt_type_t;

  typedef union __mingw_ldbl_type_t
  {
    long double x;
    __extension__ struct {
      unsigned int low, high;
      int sign_exponent : 16;
      int res1 : 16;
      int res0 : 32;
    } lh;
  } __mingw_ldbl_type_t;




  extern double * _imp___HUGE;
# 123 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3
  struct _exception {
    int type;
    const char *name;
    double arg1;
    double arg2;
    double retval;
  };

  void __mingw_raise_matherr (int typ, const char *name, double a1, double a2,
         double rslt);
  void __mingw_setusermatherr (int (__attribute__((__cdecl__)) *)(struct _exception *));
  __attribute__ ((__dllimport__)) void __setusermatherr(int (__attribute__((__cdecl__)) *)(struct _exception *));



  double __attribute__((__cdecl__)) sin(double _X);
  double __attribute__((__cdecl__)) cos(double _X);
  double __attribute__((__cdecl__)) tan(double _X);
  double __attribute__((__cdecl__)) sinh(double _X);
  double __attribute__((__cdecl__)) cosh(double _X);
  double __attribute__((__cdecl__)) tanh(double _X);
  double __attribute__((__cdecl__)) asin(double _X);
  double __attribute__((__cdecl__)) acos(double _X);
  double __attribute__((__cdecl__)) atan(double _X);
  double __attribute__((__cdecl__)) atan2(double _Y,double _X);
  double __attribute__((__cdecl__)) exp(double _X);
  double __attribute__((__cdecl__)) log(double _X);
  double __attribute__((__cdecl__)) log10(double _X);
  double __attribute__((__cdecl__)) pow(double _X,double _Y);
  double __attribute__((__cdecl__)) sqrt(double _X);
  double __attribute__((__cdecl__)) ceil(double _X);
  double __attribute__((__cdecl__)) floor(double _X);


  extern float __attribute__((__cdecl__)) fabsf (float x);
  extern long double __attribute__((__cdecl__)) fabsl (long double);
  extern double __attribute__((__cdecl__)) fabs (double _X);



  inline float __attribute__((__cdecl__)) fabsf (float x)
  {



    float res = 0.0F;
    __asm__ __volatile__ ("fabs;" : "=t" (res) : "0" (x));
    return res;

  }

  inline long double __attribute__((__cdecl__)) fabsl (long double x)
  {
    long double res = 0.0l;
    __asm__ __volatile__ ("fabs;" : "=t" (res) : "0" (x));
    return res;
  }

  inline double __attribute__((__cdecl__)) fabs (double x)
  {



    double res = 0.0;
    __asm__ __volatile__ ("fabs;" : "=t" (res) : "0" (x));
    return res;

  }



  double __attribute__((__cdecl__)) ldexp(double _X,int _Y);
  double __attribute__((__cdecl__)) frexp(double _X,int *_Y);
  double __attribute__((__cdecl__)) modf(double _X,double *_Y);
  double __attribute__((__cdecl__)) fmod(double _X,double _Y);

  void __attribute__((__cdecl__)) sincos (double __x, double *p_sin, double *p_cos);
  void __attribute__((__cdecl__)) sincosl (long double __x, long double *p_sin, long double *p_cos);
  void __attribute__((__cdecl__)) sincosf (float __x, float *p_sin, float *p_cos);
# 221 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3
  struct _complex {
    double x;
    double y;
  };


  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _cabs(struct _complex _ComplexA);
  double __attribute__((__cdecl__)) _hypot(double _X,double _Y);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _j0(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _j1(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _jn(int _X,double _Y);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _y0(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _y1(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _yn(int _X,double _Y);


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _matherr (struct _exception *);
# 248 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _chgsign (double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _copysign (double _Number,double _Sign);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _logb (double);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _nextafter (double, double);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _scalb (double, long);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _finite (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fpclass (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isnan (double);






__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) j0 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) j1 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) jn (int, double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) y0 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) y1 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) yn (int, double) ;

__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) chgsign (double);
# 278 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) finite (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) fpclass (double);
# 295 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_SSE2_enable(int _Flag);
# 323 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3
typedef float float_t;
typedef double double_t;
# 358 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3
  extern int __attribute__((__cdecl__)) __fpclassifyl (long double);
  extern int __attribute__((__cdecl__)) __fpclassifyf (float);
  extern int __attribute__((__cdecl__)) __fpclassify (double);


  inline int __attribute__((__cdecl__)) __fpclassifyl (long double x) {
    unsigned short sw;
    __asm__ __volatile__ ("fxam; fstsw %%ax;" : "=a" (sw): "t" (x));
    return sw & (0x0100 | 0x0400 | 0x4000 );
  }
  inline int __attribute__((__cdecl__)) __fpclassify (double x) {
# 385 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3
    unsigned short sw;
    __asm__ __volatile__ ("fxam; fstsw %%ax;" : "=a" (sw): "t" (x));
    return sw & (0x0100 | 0x0400 | 0x4000 );

  }
  inline int __attribute__((__cdecl__)) __fpclassifyf (float x) {
# 404 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3
    unsigned short sw;
    __asm__ __volatile__ ("fxam; fstsw %%ax;" : "=a" (sw): "t" (x));
    return sw & (0x0100 | 0x0400 | 0x4000 );

  }
# 425 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3
  extern int __attribute__((__cdecl__)) __isnan (double);
  extern int __attribute__((__cdecl__)) __isnanf (float);
  extern int __attribute__((__cdecl__)) __isnanl (long double);


  inline int __attribute__((__cdecl__)) __isnan (double _x)
  {
# 443 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3
    unsigned short sw;
    __asm__ __volatile__ ("fxam;"
      "fstsw %%ax": "=a" (sw) : "t" (_x));
    return (sw & (0x0100 | 0x0400 | (0x0100 | 0x0400) | 0x4000 | (0x0400 | 0x4000)))
      == 0x0100;

  }

  inline int __attribute__((__cdecl__)) __isnanf (float _x)
  {
# 462 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3
    unsigned short sw;
    __asm__ __volatile__ ("fxam;"
      "fstsw %%ax": "=a" (sw) : "t" (_x));
    return (sw & (0x0100 | 0x0400 | (0x0100 | 0x0400) | 0x4000 | (0x0400 | 0x4000)))
      == 0x0100;

  }

  inline int __attribute__((__cdecl__)) __isnanl (long double _x)
  {
    unsigned short sw;
    __asm__ __volatile__ ("fxam;"
      "fstsw %%ax": "=a" (sw) : "t" (_x));
    return (sw & (0x0100 | 0x0400 | (0x0100 | 0x0400) | 0x4000 | (0x0400 | 0x4000)))
      == 0x0100;
  }
# 488 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3
  extern int __attribute__((__cdecl__)) __signbit (double);
  extern int __attribute__((__cdecl__)) __signbitf (float);
  extern int __attribute__((__cdecl__)) __signbitl (long double);

  inline int __attribute__((__cdecl__)) __signbit (double x) {






    unsigned short stw;
    __asm__ __volatile__ ( "fxam; fstsw %%ax;": "=a" (stw) : "t" (x));
    return stw & 0x0200;

  }

  inline int __attribute__((__cdecl__)) __signbitf (float x) {





    unsigned short stw;
    __asm__ __volatile__ ("fxam; fstsw %%ax;": "=a" (stw) : "t" (x));
    return stw & 0x0200;

  }

  inline int __attribute__((__cdecl__)) __signbitl (long double x) {
    unsigned short stw;
    __asm__ __volatile__ ("fxam; fstsw %%ax;": "=a" (stw) : "t" (x));
    return stw & 0x0200;
  }







  extern float __attribute__((__cdecl__)) sinf(float _X);
  extern long double __attribute__((__cdecl__)) sinl(long double);

  extern float __attribute__((__cdecl__)) cosf(float _X);
  extern long double __attribute__((__cdecl__)) cosl(long double);

  extern float __attribute__((__cdecl__)) tanf(float _X);
  extern long double __attribute__((__cdecl__)) tanl(long double);
  extern float __attribute__((__cdecl__)) asinf(float _X);
  extern long double __attribute__((__cdecl__)) asinl(long double);

  extern float __attribute__((__cdecl__)) acosf (float);
  extern long double __attribute__((__cdecl__)) acosl (long double);

  extern float __attribute__((__cdecl__)) atanf (float);
  extern long double __attribute__((__cdecl__)) atanl (long double);

  extern float __attribute__((__cdecl__)) atan2f (float, float);
  extern long double __attribute__((__cdecl__)) atan2l (long double, long double);


  extern float __attribute__((__cdecl__)) sinhf(float _X);

  inline float sinhf(float _X) { return ((float)sinh((double)_X)); }

  extern long double __attribute__((__cdecl__)) sinhl(long double);

  extern float __attribute__((__cdecl__)) coshf(float _X);

  inline float coshf(float _X) { return ((float)cosh((double)_X)); }

  extern long double __attribute__((__cdecl__)) coshl(long double);

  extern float __attribute__((__cdecl__)) tanhf(float _X);

  inline float tanhf(float _X) { return ((float)tanh((double)_X)); }

  extern long double __attribute__((__cdecl__)) tanhl(long double);



  extern double __attribute__((__cdecl__)) acosh (double);
  extern float __attribute__((__cdecl__)) acoshf (float);
  extern long double __attribute__((__cdecl__)) acoshl (long double);


  extern double __attribute__((__cdecl__)) asinh (double);
  extern float __attribute__((__cdecl__)) asinhf (float);
  extern long double __attribute__((__cdecl__)) asinhl (long double);


  extern double __attribute__((__cdecl__)) atanh (double);
  extern float __attribute__((__cdecl__)) atanhf (float);
  extern long double __attribute__((__cdecl__)) atanhl (long double);



  extern float __attribute__((__cdecl__)) expf(float _X);

  inline float expf(float _X) { return ((float)exp((double)_X)); }

  extern long double __attribute__((__cdecl__)) expl(long double);


  extern double __attribute__((__cdecl__)) exp2(double);
  extern float __attribute__((__cdecl__)) exp2f(float);
  extern long double __attribute__((__cdecl__)) exp2l(long double);



  extern double __attribute__((__cdecl__)) expm1(double);
  extern float __attribute__((__cdecl__)) expm1f(float);
  extern long double __attribute__((__cdecl__)) expm1l(long double);


  extern float frexpf(float _X,int *_Y);

  inline float frexpf(float _X,int *_Y) { return ((float)frexp((double)_X,_Y)); }

  extern long double __attribute__((__cdecl__)) frexpl(long double,int *);




  extern int __attribute__((__cdecl__)) ilogb (double);
  extern int __attribute__((__cdecl__)) ilogbf (float);
  extern int __attribute__((__cdecl__)) ilogbl (long double);


  extern float __attribute__((__cdecl__)) ldexpf(float _X,int _Y);

  inline float __attribute__((__cdecl__)) ldexpf (float x, int expn) { return (float) ldexp ((double)x, expn); }

  extern long double __attribute__((__cdecl__)) ldexpl (long double, int);


  extern float __attribute__((__cdecl__)) logf (float);
  extern long double __attribute__((__cdecl__)) logl(long double);


  extern float __attribute__((__cdecl__)) log10f (float);
  extern long double __attribute__((__cdecl__)) log10l(long double);


  extern double __attribute__((__cdecl__)) log1p(double);
  extern float __attribute__((__cdecl__)) log1pf(float);
  extern long double __attribute__((__cdecl__)) log1pl(long double);


  extern double __attribute__((__cdecl__)) log2 (double);
  extern float __attribute__((__cdecl__)) log2f (float);
  extern long double __attribute__((__cdecl__)) log2l (long double);


  extern double __attribute__((__cdecl__)) logb (double);
  extern float __attribute__((__cdecl__)) logbf (float);
  extern long double __attribute__((__cdecl__)) logbl (long double);





  inline double __attribute__((__cdecl__)) logb (double x)
  {
# 668 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3
    double res = 0.0;
    __asm__ __volatile__ ("fxtract\n\t"
      "fstp	%%st" : "=t" (res) : "0" (x));
    return res;

  }

  inline float __attribute__((__cdecl__)) logbf (float x)
  {
# 691 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3
    float res = 0.0F;
    __asm__ __volatile__ ("fxtract\n\t"
      "fstp	%%st" : "=t" (res) : "0" (x));
    return res;

  }

  inline long double __attribute__((__cdecl__)) logbl (long double x)
  {
    long double res = 0.0l;
    __asm__ __volatile__ ("fxtract\n\t"
      "fstp	%%st" : "=t" (res) : "0" (x));
    return res;
  }




  extern float __attribute__((__cdecl__)) modff (float, float*);
  extern long double __attribute__((__cdecl__)) modfl (long double, long double*);


  extern double __attribute__((__cdecl__)) scalbn (double, int);
  extern float __attribute__((__cdecl__)) scalbnf (float, int);
  extern long double __attribute__((__cdecl__)) scalbnl (long double, int);

  extern double __attribute__((__cdecl__)) scalbln (double, long);
  extern float __attribute__((__cdecl__)) scalblnf (float, long);
  extern long double __attribute__((__cdecl__)) scalblnl (long double, long);



  extern double __attribute__((__cdecl__)) cbrt (double);
  extern float __attribute__((__cdecl__)) cbrtf (float);
  extern long double __attribute__((__cdecl__)) cbrtl (long double);


  extern double __attribute__((__cdecl__)) hypot (double, double) ;
  extern float __attribute__((__cdecl__)) hypotf (float x, float y);

  inline float __attribute__((__cdecl__)) hypotf (float x, float y) { return (float) hypot ((double)x, (double)y);}

  extern long double __attribute__((__cdecl__)) hypotl (long double, long double);


  extern float __attribute__((__cdecl__)) powf(float _X,float _Y);

  inline float powf(float _X,float _Y) { return ((float)pow((double)_X,(double)_Y)); }

  extern long double __attribute__((__cdecl__)) powl (long double, long double);


  extern float __attribute__((__cdecl__)) sqrtf (float);
  extern long double sqrtl(long double);


  extern double __attribute__((__cdecl__)) erf (double);
  extern float __attribute__((__cdecl__)) erff (float);
  extern long double __attribute__((__cdecl__)) erfl (long double);


  extern double __attribute__((__cdecl__)) erfc (double);
  extern float __attribute__((__cdecl__)) erfcf (float);
  extern long double __attribute__((__cdecl__)) erfcl (long double);


  extern double __attribute__((__cdecl__)) lgamma (double);
  extern float __attribute__((__cdecl__)) lgammaf (float);
  extern long double __attribute__((__cdecl__)) lgammal (long double);

  extern int signgam;


  extern double __attribute__((__cdecl__)) tgamma (double);
  extern float __attribute__((__cdecl__)) tgammaf (float);
  extern long double __attribute__((__cdecl__)) tgammal (long double);


  extern float __attribute__((__cdecl__)) ceilf (float);
  extern long double __attribute__((__cdecl__)) ceill (long double);


  extern float __attribute__((__cdecl__)) floorf (float);
  extern long double __attribute__((__cdecl__)) floorl (long double);


  extern double __attribute__((__cdecl__)) nearbyint ( double);
  extern float __attribute__((__cdecl__)) nearbyintf (float);
  extern long double __attribute__((__cdecl__)) nearbyintl (long double);



extern double __attribute__((__cdecl__)) rint (double);
extern float __attribute__((__cdecl__)) rintf (float);
extern long double __attribute__((__cdecl__)) rintl (long double);


extern long __attribute__((__cdecl__)) lrint (double);
extern long __attribute__((__cdecl__)) lrintf (float);
extern long __attribute__((__cdecl__)) lrintl (long double);

__extension__ long long __attribute__((__cdecl__)) llrint (double);
__extension__ long long __attribute__((__cdecl__)) llrintf (float);
__extension__ long long __attribute__((__cdecl__)) llrintl (long double);






  inline double __attribute__((__cdecl__)) rint (double x)
  {
    double retval = 0.0;
    __asm__ __volatile__ ("frndint;": "=t" (retval) : "0" (x));
    return retval;
  }

  inline float __attribute__((__cdecl__)) rintf (float x)
  {
    float retval = 0.0;
    __asm__ __volatile__ ("frndint;" : "=t" (retval) : "0" (x) );
    return retval;
  }

  inline long double __attribute__((__cdecl__)) rintl (long double x)
  {
    long double retval = 0.0l;
    __asm__ __volatile__ ("frndint;" : "=t" (retval) : "0" (x) );
    return retval;
  }

  inline long __attribute__((__cdecl__)) lrint (double x)
  {
    long retval = 0;
    __asm__ __volatile__
      ("fistpl %0" : "=m" (retval) : "t" (x) : "st");
      return retval;
  }

  inline long __attribute__((__cdecl__)) lrintf (float x)
  {
    long retval = 0;
    __asm__ __volatile__
      ("fistpl %0" : "=m" (retval) : "t" (x) : "st");
      return retval;
  }

  inline long __attribute__((__cdecl__)) lrintl (long double x)
  {
    long retval = 0;
    __asm__ __volatile__
      ("fistpl %0" : "=m" (retval) : "t" (x) : "st");
      return retval;
  }

  __extension__ inline long long __attribute__((__cdecl__)) llrint (double x)
  {
    __extension__ long long retval = 0ll;
    __asm__ __volatile__
      ("fistpll %0" : "=m" (retval) : "t" (x) : "st");
      return retval;
  }

  __extension__ inline long long __attribute__((__cdecl__)) llrintf (float x)
  {
    __extension__ long long retval = 0ll;
    __asm__ __volatile__
      ("fistpll %0" : "=m" (retval) : "t" (x) : "st");
      return retval;
  }

  __extension__ inline long long __attribute__((__cdecl__)) llrintl (long double x)
  {
    __extension__ long long retval = 0ll;
    __asm__ __volatile__
      ("fistpll %0" : "=m" (retval) : "t" (x) : "st");
      return retval;
  }





  extern double __attribute__((__cdecl__)) round (double);
  extern float __attribute__((__cdecl__)) roundf (float);
  extern long double __attribute__((__cdecl__)) roundl (long double);


  extern long __attribute__((__cdecl__)) lround (double);
  extern long __attribute__((__cdecl__)) lroundf (float);
  extern long __attribute__((__cdecl__)) lroundl (long double);
  __extension__ long long __attribute__((__cdecl__)) llround (double);
  __extension__ long long __attribute__((__cdecl__)) llroundf (float);
  __extension__ long long __attribute__((__cdecl__)) llroundl (long double);



  extern double __attribute__((__cdecl__)) trunc (double);
  extern float __attribute__((__cdecl__)) truncf (float);
  extern long double __attribute__((__cdecl__)) truncl (long double);


  extern float __attribute__((__cdecl__)) fmodf (float, float);
  extern long double __attribute__((__cdecl__)) fmodl (long double, long double);


  extern double __attribute__((__cdecl__)) remainder (double, double);
  extern float __attribute__((__cdecl__)) remainderf (float, float);
  extern long double __attribute__((__cdecl__)) remainderl (long double, long double);


  extern double __attribute__((__cdecl__)) remquo(double, double, int *);
  extern float __attribute__((__cdecl__)) remquof(float, float, int *);
  extern long double __attribute__((__cdecl__)) remquol(long double, long double, int *);


  extern double __attribute__((__cdecl__)) copysign (double, double);
  extern float __attribute__((__cdecl__)) copysignf (float, float);
  extern long double __attribute__((__cdecl__)) copysignl (long double, long double);



  inline double __attribute__((__cdecl__)) copysign (double x, double y)
  {
    __mingw_dbl_type_t hx, hy;
    hx.x = x; hy.x = y;
    hx.lh.high = (hx.lh.high & 0x7fffffff) | (hy.lh.high & 0x80000000);
    return hx.x;
  }
  inline float __attribute__((__cdecl__)) copysignf (float x, float y)
  {
    __mingw_flt_type_t hx, hy;
    hx.x = x; hy.x = y;
    hx.val = (hx.val & 0x7fffffff) | (hy.val & 0x80000000);
    return hx.x;
  }




  extern double __attribute__((__cdecl__)) nan(const char *tagp);
  extern float __attribute__((__cdecl__)) nanf(const char *tagp);
  extern long double __attribute__((__cdecl__)) nanl(const char *tagp);
# 942 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3
  extern double __attribute__((__cdecl__)) nextafter (double, double);
  extern float __attribute__((__cdecl__)) nextafterf (float, float);
  extern long double __attribute__((__cdecl__)) nextafterl (long double, long double);


  extern double __attribute__((__cdecl__)) nexttoward (double, long double);
  extern float __attribute__((__cdecl__)) nexttowardf (float, long double);
  extern long double __attribute__((__cdecl__)) nexttowardl (long double, long double);



  extern double __attribute__((__cdecl__)) fdim (double x, double y);
  extern float __attribute__((__cdecl__)) fdimf (float x, float y);
  extern long double __attribute__((__cdecl__)) fdiml (long double x, long double y);







  extern double __attribute__((__cdecl__)) fmax (double, double);
  extern float __attribute__((__cdecl__)) fmaxf (float, float);
  extern long double __attribute__((__cdecl__)) fmaxl (long double, long double);


  extern double __attribute__((__cdecl__)) fmin (double, double);
  extern float __attribute__((__cdecl__)) fminf (float, float);
  extern long double __attribute__((__cdecl__)) fminl (long double, long double);



  extern double __attribute__((__cdecl__)) fma (double, double, double);
  extern float __attribute__((__cdecl__)) fmaf (float, float, float);
  extern long double __attribute__((__cdecl__)) fmal (long double, long double, long double);
# 1021 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3
  __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _hypotf(float _X,float _Y);



   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _copysignf (float _Number,float _Sign);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _chgsignf (float _X);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _logbf(float _X);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _nextafterf(float _X,float _Y);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _finitef(float _X);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isnanf(float _X);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fpclassf(float _X);



   extern long double __attribute__((__cdecl__)) _chgsignl (long double);
# 1047 "C:/Qt/Tools/mingw492_32/i686-w64-mingw32/include/math.h" 3
}




#pragma pack(pop)
# 34 "../src/interface/layout/./../../interface/./../interface/Rect.h" 2
# 1 "../src/interface/layout/./../../interface/./../interface/./../interface/Point.h" 1
# 33 "../src/interface/layout/./../../interface/./../interface/./../interface/Point.h"
# 1 "../src/interface/layout/./../../interface/./../interface/./../interface/./../support/SupportDefs.h" 1
# 34 "../src/interface/layout/./../../interface/./../interface/./../interface/Point.h" 2



class ERect;

class EPoint {
public:
 float x;
 float y;

 EPoint();
 EPoint(float X, float Y);
 EPoint(const EPoint &pt);

 EPoint &operator=(const EPoint &from);
 void Set(float X, float Y);

 void ConstrainTo(ERect rect);

 void Ceil();
 void Floor();
 void Round();

 EPoint& FloorSelf();
 EPoint FloorCopy() const;
 EPoint& CeilSelf();
 EPoint CeilCopy() const;
 EPoint& RoundSelf();
 EPoint RoundCopy() const;

 EPoint operator+(const EPoint &plus) const;
 EPoint operator-(const EPoint &minus) const;
 EPoint& operator+=(const EPoint &plus);
 EPoint& operator-=(const EPoint &minus);

 bool operator!=(const EPoint &pt) const;
 bool operator==(const EPoint &pt) const;

 void PrintToStream() const;
};

extern const EPoint E_ORIGIN;
# 35 "../src/interface/layout/./../../interface/./../interface/Rect.h" 2



class ERect {
public:
 float left;
 float top;
 float right;
 float bottom;

 ERect();
 ERect(const ERect &r);
 ERect(float l, float t, float r, float b);
 ERect(EPoint leftTop, EPoint rightBottom);

 ERect &operator=(const ERect &from);
 void Set(float l, float t, float r, float b);

 EPoint LeftTop() const;
 EPoint RightBottom() const;
 EPoint LeftBottom() const;
 EPoint RightTop() const;
 EPoint Center() const;

 void SetLeftTop(const EPoint pt);
 void SetRightBottom(const EPoint pt);
 void SetLeftBottom(const EPoint pt);
 void SetRightTop(const EPoint pt);

 void SetLeftTop(float x, float y);
 void SetRightBottom(float x, float y);
 void SetLeftBottom(float x, float y);
 void SetRightTop(float x, float y);

 void InsetBy(EPoint pt);
 void InsetBy(float dx, float dy);
 void OffsetBy(EPoint pt);
 void OffsetBy(float dx, float dy);
 void OffsetTo(EPoint pt);
 void OffsetTo(float x, float y);

 void Floor();
 void Ceil();
 void Round();

 ERect& InsetBySelf(EPoint pt);
 ERect& InsetBySelf(float dx, float dy);
 ERect InsetByCopy(EPoint pt) const;
 ERect InsetByCopy(float dx, float dy) const;
 ERect& OffsetBySelf(EPoint pt);
 ERect& OffsetBySelf(float dx, float dy);
 ERect OffsetByCopy(EPoint pt) const;
 ERect OffsetByCopy(float dx, float dy) const;
 ERect& OffsetToSelf(EPoint pt);
 ERect& OffsetToSelf(float x, float y);
 ERect OffsetToCopy(EPoint pt) const;
 ERect OffsetToCopy(float x, float y) const;

 ERect& FloorSelf();
 ERect FloorCopy() const;
 ERect& CeilSelf();
 ERect CeilCopy() const;
 ERect& RoundSelf();
 ERect RoundCopy() const;

 bool operator==(ERect r) const;
 bool operator!=(ERect r) const;

 ERect operator&(ERect r) const;
 ERect operator|(ERect r) const;

 ERect& operator&=(ERect r);
 ERect& operator|=(ERect r);

 bool IsValid() const;
 float Width() const;
 eint32 IntegerWidth() const;
 float Height() const;
 eint32 IntegerHeight() const;

 bool Intersects(ERect r) const;
 bool Intersects(float l, float t, float r, float b) const;

 bool Contains(EPoint pt) const;
 bool Contains(float x, float y) const;
 bool Contains(ERect r) const;
 bool Contains(float l, float t, float r, float b) const;

 void PrintToStream() const;
};


inline EPoint ERect::LeftTop() const
{
 return(EPoint(left, top));
}


inline EPoint ERect::RightBottom() const
{
 return(EPoint(right, bottom));
}


inline EPoint ERect::LeftBottom() const
{
 return(EPoint(left, bottom));
}


inline EPoint ERect::RightTop() const
{
 return(EPoint(right, top));
}


inline EPoint ERect::Center() const
{
 return(EPoint(left + (right - left) / 2, top + (bottom - top) / 2));
}


inline ERect::ERect()
{
 top = left = 0;
 bottom = right = -1;
}


inline ERect::ERect(float l, float t, float r, float b)
{
 left = l;
 top = t;
 right = r;
 bottom = b;
}


inline ERect::ERect(const ERect &r)
{
 left = r.left;
 top = r.top;
 right = r.right;
 bottom = r.bottom;
}


inline ERect::ERect(EPoint leftTop, EPoint rightBottom)
{
 left = leftTop.x;
 top = leftTop.y;
 right = rightBottom.x;
 bottom = rightBottom.y;
}


inline ERect& ERect::operator=(const ERect& from)
{
 left = from.left;
 top = from.top;
 right = from.right;
 bottom = from.bottom;
 return *this;
}


inline void ERect::Set(float l, float t, float r, float b)
{
 left = l;
 top = t;
 right = r;
 bottom = b;
}


inline bool ERect::IsValid() const
{
 return(left <= right && top <= bottom);
}


inline eint32 ERect::IntegerWidth() const
{
 return((eint32)ceil((double)(right - left)));
}


inline float ERect::Width() const
{
 return(right - left);
}


inline eint32 ERect::IntegerHeight() const
{
 return((eint32)ceil((double)(bottom - top)));
}


inline float ERect::Height() const
{
 return(bottom - top);
}
# 36 "../src/interface/layout/./../../interface/Region.h" 2



class ERegion {
public:
 ERegion();
 ERegion(const ERegion &region);
 ERegion(const ERect &rect);
 virtual ~ERegion();

 ERegion &operator=(const ERegion &from);

 ERegion operator&(ERect r) const;
 ERegion operator|(ERect r) const;

 ERegion& operator&=(ERect r);
 ERegion& operator|=(ERect r);

 ERegion operator&(const ERegion &region) const;
 ERegion operator|(const ERegion &region) const;

 ERegion& operator&=(const ERegion &region);
 ERegion& operator|=(const ERegion &region);

 ERect Frame() const;
 ERect RectAt(eint32 index) const;
 eint32 CountRects() const;

 void Set(ERect singleBound);
 void MakeEmpty();

 bool Include(ERect r);
 bool Include(const ERegion *region);

 bool Exclude(ERect r);
 bool Exclude(const ERegion *region);

 void OffsetBy(float dx, float dy);
 void OffsetBy(EPoint pt);
 ERegion& OffsetBySelf(float dx, float dy);
 ERegion& OffsetBySelf(EPoint pt);
 ERegion OffsetByCopy(float dx, float dy);
 ERegion OffsetByCopy(EPoint pt);

 void Scale(float scaling);
 ERegion& ScaleSelf(float scaling);
 ERegion ScaleCopy(float scaling);

 bool Intersects(ERect r) const;
 bool Intersects(float l, float t, float r, float b) const;
 bool Intersects(const ERegion *region) const;

 bool Contains(EPoint pt) const;
 bool Contains(float x, float y) const;
 bool Contains(ERect r) const;
 bool Contains(float l, float t, float r, float b) const;
 bool Contains(const ERegion *region) const;

 void PrintToStream() const;

private:
 EList fRects;
 ERect fFrame;
};
# 36 "../src/interface/layout/Layout.h" 2



class ELayoutItem;
class ELayoutForm;


class ELayoutContainer {
public:
 ELayoutContainer();
 virtual ~ELayoutContainer();

 virtual bool AddItem(ELayoutItem *item, eint32 index = -1);
 virtual bool RemoveItem(ELayoutItem *item);
 ELayoutItem *RemoveItem(eint32 index);

 ELayoutItem *ItemAt(eint32 index) const;
 eint32 IndexOf(const ELayoutItem *item) const;
 eint32 CountItems() const;

 float UnitsPerPixel() const;
 void SetUnitsPerPixel(float value, bool deep = true);

 virtual void Invalidate(ERect rect);

 void SetPrivateData(void *data, void (*destroy_func)(void*) = __null);
 void *PrivateData() const;

private:
 friend class ELayoutItem;

 float fUnitsPerPixel;
 EList fItems;
 void *fPrivate[2];
};


class ELayoutItem : public ELayoutContainer {
public:
 ELayoutItem(ERect frame, euint32 resizingMode);
 virtual ~ELayoutItem();

 ELayoutContainer *Container() const;
 ELayoutContainer *Ancestor() const;

 bool RemoveSelf();

 ELayoutItem *PreviousSibling() const;
 ELayoutItem *NextSibling() const;

 virtual void SetResizingMode(euint32 mode);
 euint32 ResizingMode() const;

 virtual void Show();
 virtual void Hide();
 bool IsHidden(bool check_containers = true) const;

 virtual void SendBehind(ELayoutItem *item);
 virtual void MoveTo(EPoint where);
 virtual void ScrollTo(EPoint where);
 virtual void ResizeTo(float width, float height);
 void MoveAndResizeTo(EPoint where, float width, float height);

 virtual void GetPreferredSize(float *width, float *height);
 virtual void ResizeToPreferred();

 ERect Bounds() const;
 ERect Frame() const;
 const ERegion *VisibleRegion() const;

 EPoint LeftTop() const;
 float Width() const;
 float Height() const;

 void ConvertToContainer(EPoint *pt) const;
 EPoint ConvertToContainer(EPoint pt) const;
 void ConvertFromContainer(EPoint *pt) const;
 EPoint ConvertFromContainer(EPoint pt) const;

 virtual void UpdateVisibleRegion();

protected:
 void GetVisibleRegion(ERegion **region);

private:
 friend class ELayoutContainer;
 friend class ELayoutForm;

 ELayoutContainer *fContainer;
 eint32 fIndex;

 EPoint fLocalOrigin;
 ERegion fVisibleRegion;

 ERect fFrame;
 euint32 fResizingMode;
 bool fHidden;
 bool fUpdating;
};


class ELayoutForm : public ELayoutItem {
public:
 ELayoutForm(ERect frame, euint32 resizingMode, eint32 rows, eint32 columns);
 virtual ~ELayoutForm();

private:
 void *fData;
};
# 31 "../src/interface/layout/LayoutForm.cpp" 2

ELayoutForm::ELayoutForm(ERect frame, euint32 resizingMode, eint32 rows, eint32 columns)
 : ELayoutItem(frame, resizingMode), fData(__null)
{
}


ELayoutForm::~ELayoutForm()
{
 if(fData != __null) free(fData);
}
